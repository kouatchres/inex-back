# import * from './generated/prisma.graphql'


type Mutation {
    createUser(name: String!, email: String!): User! 
    createCandidate(
    cand1stName:String,
    cand2ndName:String,
    cand3rdName:String,
    email: String,
    phoneNumb: Int,
    momName: String,
    dadName: String,
    image: String,
    dateOfBirth: DateTime,
    birthCertNumber: String,
    candCode: String,
    placeOfBirth: String,
    gender:  GenderWhereUniqueInput !
       ):Candidate!

   updateCandidate(
     id:ID!,
    cand1stName:String,
    cand2ndName:String,
    cand3rdName:String,
    momName: String,
    dadName: String,
    email: String,
    phoneNumb: Int,
    dateOfBirth: DateTime,
    birthCertNumber: String,
    image: String,
    placeOfBirth: String,
    gender: GenderWhereUniqueInput
       ):Candidate!
       
    createScore(
        registration: RegistrationWhereUniqueInput!
        subjectSeries: SubjectSeriesWhereUniqueInput!
        candExamSecretCode: String!
        series: SeriesWhereUniqueInput!
        coeff: Int!
    ): Score!
 createCenterExamSession( center: CenterWhereUniqueInput!, examSession: ExamSessionWhereUniqueInput! ):CenterExamSession!
 createExamSession( exam: ExamWhereUniqueInput! , session: SessionWhereUniqueInput! ):ExamSession!
 createCenterExamSessionSeries( centerExamSession: CenterExamSessionWhereUniqueInput!, series: SeriesWhereUniqueInput! ):CenterExamSessionSeries!

    updateScore(subjectSeries: SubjectSeriesWhereUniqueInput!, subjectAve: Float!, candExamSecretCode: String!):Score!
    updateCenterExamSessionSeries(centerExamSessionSeries: CenterExamSessionSeriesWhereUniqueInput!, seriesUsed: Int):CenterExamSessionSeries!

    updateManyRegistrations(data: RegistrationUpdateManyMutationInput!, where: RegistrationWhereInput): BatchPayload!
  

       createRegion(regName: String!, regCode: String!):Region!
       updateRegion(id:ID!, regName: String, regCode: String):Region!
      
       createSubjectType(subjectTypeName: String!, subjectTypeCode: String!):SubjectType!
       updateSubjectType(id:ID!, subjectTypeName: String, subjectTypeCode: String):SubjectType!

       createExam(examName: String!, examCode: String!):Exam!
       updateExam(id:ID!, examName: String, examCode: String):Exam!
      
      
       createSeries(seriesName: String!, seriesCode: String!,educationType:EducationTypeWhereUniqueInput! ):Series!
       updateSeries(id:ID!, seriesName: String, seriesCode: String):Series!
      
      
       createSubject(subjectName: String!, subjectCode: String!, educType: EducationTypeWhereUniqueInput!, subjectType: SubjectTypeWhereUniqueInput!):Subject!
       updateSubject(id:ID!, subjectName: String, subjectCode: String):Subject!
      
       createReport(
         reportImage: String!, 
         reportName: String!, 
         centerExamSessionAuthority: CenterExamSessionAuthorityWhereUniqueInput!
         ):Report!
       updateReport(id:ID!, reportName: String, reportCode: String):Report!
      
       createSession(sessionName: String!, sessionCode: String!):Session!
       updateSession(id:ID!, sessionName: String, sessionCode: String):Session!
      
       createRank(rankName: String!, rankCode: String!):Rank!
       updateRank(id:ID!, rankName: String, rankCode: String):Rank!
     
       createEducationType( educationTypeName: String!, educationTypeCode: String!):EducationType!
       updateEducationType(id:ID!, educationTypeName: String, educationTypeCode: String):EducationType!
      
       updateRegistration(id:ID!):Registration!
      
       createRegistration( 
                    candidate: CandidateWhereUniqueInput!,
                    series: SeriesWhereUniqueInput!,
                    candExamSecretCode: String!,
                    candExamSession: String!,
                    candRegistrationNumber:String
                    centerExamSessionSeries:CenterExamSessionSeriesWhereUniqueInput!
                    centerExamSession:CenterExamSessionWhereUniqueInput!
                    ):Registration!

       updateCenterExamSessionAuthority(id:ID!):CenterExamSessionAuthority!
       createCenterExamSessionAuthority( 
                    rank: RankWhereUniqueInput!,
                    centerExamSession: CenterExamSessionWhereUniqueInput!
                    authName: String!
                    authCode: String!
                    authMatricule: String!
                    authCNI: String!
                    authPhone: Int!
             ):CenterExamSessionAuthority!

       createDivision(divName: String!, divCode: String!, region: RegionCreateWithoutDivisionInput! ):Division!
       updateDivision(id: ID!, divName: String, divCode: String ):Division!
       createSubDivision(subDivName: String!, subDivCode: String!,  division: DivisionWhereUniqueInput! ):SubDivision!
       updateSubDivision(id: ID!, subDivName: String, subDivCode: String ):SubDivision!
       createTown(townName: String!, townCode: String!,  subDiv: SubDivisionWhereUniqueInput! ):Town!
       updateTown(id: ID!, townName: String, townCode: String ):Town!

       createCenter(centerName: String!,centerSecretCode: String!, centerCode: String!, centerNumber: Int, town: TownWhereUniqueInput! ):Center!
       updateCenter(id: ID!, centerName: String, centerCode: String, centerNumber: Int ):Center!

       createGender(genderName: String! , genderCode: String!):Gender!
       updateGender(id: ID!, genderName: String, genderCode: String ):Gender!
       deleteCandidate(id: ID! ): Candidate      
       deleteRegion(id: ID! ): Region


    
       createSubjectSeries( 
          subjectName: String!,
          subjectCode: String!,
          series: SeriesWhereUniqueInput!,
          coeff: Int!
     ):SubjectSeries!

      #  signUp(name: String! , email: String!, password: String!):User!
       }

type Query {
         
       candidateSignIn(candCode: String!):Candidate!
      #  centerExamSessionAuthoritySignIn(authCode: String!):CenterExamSessionAuthority!
         me:User
        candidates(orderBy:CandidateOrderByInput):[Candidate]!  
        candidate(id: ID!):Candidate!
       candidateCode(candCode: String!):Candidate!

        scores(candExamSecretCode: String!):[Score]!  
        score(id: ID!):Score!
        singleCandidate(candCode: String!):Candidate!
        regions(orderBy:RegionOrderByInput):[Region!]! 
        region(id: ID!):Region! 

        exams(orderBy:ExamOrderByInput):[Exam]! 
        exam(id: ID!):Exam! 

        centerExamSessionAuthoritys:[CenterExamSessionAuthority]! 
        centerExamSessionAuthority(id: ID!):CenterExamSessionAuthority! 

        subjectTypes(orderBy:SubjectTypeOrderByInput):[SubjectType]! 
        subjectType(id: ID!):SubjectType! 
    countRegisteredCandidates(id:ID!):[CenterExamSession]!
    registrationsConnection(where: RegistrationWhereInput): RegistrationConnection!

        centerExamSessions(
          examSession: ExamSessionWhereUniqueInput!
 		center: CenterWhereUniqueInput!):[CenterExamSession]! 
        centerExamSession(id: ID!):CenterExamSession! 
        examSessions(
          exam: ExamWhereUniqueInput!
	session: SessionWhereUniqueInput!):[ExamSession]! 
        examSession(id: ID!):ExamSession! 

        centerExamSessionSerieses(  
          centerExamSession: CenterExamSessionWhereUniqueInput!
         series: SeriesWhereUniqueInput!):[CenterExamSessionSeries]! 

        centerExamSessionForResults(centerExamSession: String!):[CenterExamSession]! 
        # centerExamSessionSeriesForResults(centerExamSessionSeries: CenterExamSessionWhereUniqueInput!):[CenterExamSession]! 

        registrations:[Registration]! 
        getCandidateByCode(candCode: String! ):[Candidate]! 
        candidateRegistrationID(centerExamSession: CenterExamSessionWhereUniqueInput!, candidate: CandidateWhereUniqueInput!):Registration!
        candidateRegistrationIDs(candidate: CandidateWhereInput!):[Registration]!
        getCenterResults(centerExamSession: CenterExamSessionWhereUniqueInput!):[CenterExamSessionSeries]!
        # centerExamSessionIDs(centerExamSession: CenterExamSessionWhereUniqueInput!):[CenterExamSession]!
        getAllBoardResults(exam:ExamWhereUniqueInput!, session: SessionWhereUniqueInput!):[Registration]!
        registration(id: ID!):Registration! 

        serieses(orderBy:SeriesOrderByInput):[Series]! 
        # allSerieses(orderBy:SeriesOrderByInput):[Series]! 
        series(id: ID!):Series! 
        subjSeries(id: ID!):Series! 

        subjectSerieses(orderBy:SubjectSeriesOrderByInput):[SubjectSeries]! 
        subjects(orderBy:SubjectOrderByInput):[Subject]! 
        subject(id: ID!):Subject! 

        reports(orderBy:ReportOrderByInput):[Report]! 
        report(id: ID!):Report! 

        sessions(orderBy:SessionOrderByInput):[Session]! 
        session(id: ID!):Session! 

        ranks(orderBy:RankOrderByInput):[Rank]! 
        rank(id: ID!):Rank! 
        educationTypes(orderBy:EducationTypeOrderByInput):[EducationType]! 
        educationType(id: ID!):EducationType! 
      
         subjectSeries(id:ID! ): SubjectSeries!

       division(id: ID!): Division!
       divisions(orderBy:DivisionOrderByInput):[Division]!

       town(id: ID!): Town!
       towns(orderBy:TownOrderByInput):[Town]!
       
       subDivision(id: ID!): SubDivision!
       subDivisions(orderBy:SubDivisionOrderByInput):[SubDivision]!
       center(center: CenterWhereUniqueInput!): Center!
       centerByNumber(centerNumber: Int!): Center!
       centerByCode(centerCode: String!): Center!
       centers(orderBy:CenterOrderByInput):[Center]!
        
             users:[User]!
         genders(orderBy:GenderOrderByInput):[Gender]!
         gender(id:ID!):Gender!
         Region(where:RegionWhereUniqueInput!):Region!
           }


type Series {
    id : ID  !
    seriesName : String !
    seriesCode : String !
    subjectSeries: [SubjectSeries]!
    createdAt : DateTime! 
    updatedAt : DateTime!
    educationType : EducationType !
    registration : [Registration]!
     scores: [Score]!
}
