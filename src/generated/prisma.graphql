# source: https://eu1.prisma.sh/kouatchoua/inex-back/dev
# timestamp: Thu Dec 12 2019 14:54:10 GMT+0100 (West Africa Standard Time)

type AggregateAnnualExamSubjectSeries {
  count: Int!
}

type AggregateAnotherType {
  count: Int!
}

type AggregateCandidate {
  count: Int!
}

type AggregateCenter {
  count: Int!
}

type AggregateCenterAdmin {
  count: Int!
}

type AggregateDivision {
  count: Int!
}

type AggregateEducationType {
  count: Int!
}

type AggregateExam {
  count: Int!
}

type AggregateGender {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregatePresence {
  count: Int!
}

type AggregateRank {
  count: Int!
}

type AggregateRegion {
  count: Int!
}

type AggregateRegistration {
  count: Int!
}

type AggregateReport {
  count: Int!
}

type AggregateScore {
  count: Int!
}

type AggregateSeries {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSubDivision {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateTown {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AnnualExamSubjectSeries implements Node {
  id: ID!
  exam: Exam!
  session: Session!
  center: Center!
  rankCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  score(where: ScoreWhereInput, orderBy: ScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Score!]
}

"""A connection to a list of items."""
type AnnualExamSubjectSeriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnnualExamSubjectSeriesEdge]!
  aggregate: AggregateAnnualExamSubjectSeries!
}

input AnnualExamSubjectSeriesCreateInput {
  id: ID
  rankCode: String!
  exam: ExamCreateOneWithoutAnnExamSeriesSubjInput!
  session: SessionCreateOneWithoutAnnExamSeriesSubjInput!
  center: CenterCreateOneInput!
  score: ScoreCreateManyWithoutAnnExamSeriesSubjInput
}

input AnnualExamSubjectSeriesCreateManyInput {
  create: [AnnualExamSubjectSeriesCreateInput!]
  connect: [AnnualExamSubjectSeriesWhereUniqueInput!]
}

input AnnualExamSubjectSeriesCreateManyWithoutExamInput {
  create: [AnnualExamSubjectSeriesCreateWithoutExamInput!]
  connect: [AnnualExamSubjectSeriesWhereUniqueInput!]
}

input AnnualExamSubjectSeriesCreateManyWithoutSessionInput {
  create: [AnnualExamSubjectSeriesCreateWithoutSessionInput!]
  connect: [AnnualExamSubjectSeriesWhereUniqueInput!]
}

input AnnualExamSubjectSeriesCreateOneWithoutScoreInput {
  create: AnnualExamSubjectSeriesCreateWithoutScoreInput
  connect: AnnualExamSubjectSeriesWhereUniqueInput
}

input AnnualExamSubjectSeriesCreateWithoutExamInput {
  id: ID
  rankCode: String!
  session: SessionCreateOneWithoutAnnExamSeriesSubjInput!
  center: CenterCreateOneInput!
  score: ScoreCreateManyWithoutAnnExamSeriesSubjInput
}

input AnnualExamSubjectSeriesCreateWithoutScoreInput {
  id: ID
  rankCode: String!
  exam: ExamCreateOneWithoutAnnExamSeriesSubjInput!
  session: SessionCreateOneWithoutAnnExamSeriesSubjInput!
  center: CenterCreateOneInput!
}

input AnnualExamSubjectSeriesCreateWithoutSessionInput {
  id: ID
  rankCode: String!
  exam: ExamCreateOneWithoutAnnExamSeriesSubjInput!
  center: CenterCreateOneInput!
  score: ScoreCreateManyWithoutAnnExamSeriesSubjInput
}

"""An edge in a connection."""
type AnnualExamSubjectSeriesEdge {
  """The item at the end of the edge."""
  node: AnnualExamSubjectSeries!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnnualExamSubjectSeriesOrderByInput {
  id_ASC
  id_DESC
  rankCode_ASC
  rankCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AnnualExamSubjectSeriesPreviousValues {
  id: ID!
  rankCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AnnualExamSubjectSeriesScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnualExamSubjectSeriesScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnualExamSubjectSeriesScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnualExamSubjectSeriesScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rankCode: String

  """All values that are not equal to given value."""
  rankCode_not: String

  """All values that are contained in given list."""
  rankCode_in: [String!]

  """All values that are not contained in given list."""
  rankCode_not_in: [String!]

  """All values less than the given value."""
  rankCode_lt: String

  """All values less than or equal the given value."""
  rankCode_lte: String

  """All values greater than the given value."""
  rankCode_gt: String

  """All values greater than or equal the given value."""
  rankCode_gte: String

  """All values containing the given string."""
  rankCode_contains: String

  """All values not containing the given string."""
  rankCode_not_contains: String

  """All values starting with the given string."""
  rankCode_starts_with: String

  """All values not starting with the given string."""
  rankCode_not_starts_with: String

  """All values ending with the given string."""
  rankCode_ends_with: String

  """All values not ending with the given string."""
  rankCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AnnualExamSubjectSeriesSubscriptionPayload {
  mutation: MutationType!
  node: AnnualExamSubjectSeries
  updatedFields: [String!]
  previousValues: AnnualExamSubjectSeriesPreviousValues
}

input AnnualExamSubjectSeriesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnualExamSubjectSeriesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnualExamSubjectSeriesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnualExamSubjectSeriesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnnualExamSubjectSeriesWhereInput
}

input AnnualExamSubjectSeriesUpdateDataInput {
  rankCode: String
  exam: ExamUpdateOneRequiredWithoutAnnExamSeriesSubjInput
  session: SessionUpdateOneRequiredWithoutAnnExamSeriesSubjInput
  center: CenterUpdateOneRequiredInput
  score: ScoreUpdateManyWithoutAnnExamSeriesSubjInput
}

input AnnualExamSubjectSeriesUpdateInput {
  rankCode: String
  exam: ExamUpdateOneRequiredWithoutAnnExamSeriesSubjInput
  session: SessionUpdateOneRequiredWithoutAnnExamSeriesSubjInput
  center: CenterUpdateOneRequiredInput
  score: ScoreUpdateManyWithoutAnnExamSeriesSubjInput
}

input AnnualExamSubjectSeriesUpdateManyDataInput {
  rankCode: String
}

input AnnualExamSubjectSeriesUpdateManyInput {
  create: [AnnualExamSubjectSeriesCreateInput!]
  connect: [AnnualExamSubjectSeriesWhereUniqueInput!]
  set: [AnnualExamSubjectSeriesWhereUniqueInput!]
  disconnect: [AnnualExamSubjectSeriesWhereUniqueInput!]
  delete: [AnnualExamSubjectSeriesWhereUniqueInput!]
  update: [AnnualExamSubjectSeriesUpdateWithWhereUniqueNestedInput!]
  updateMany: [AnnualExamSubjectSeriesUpdateManyWithWhereNestedInput!]
  deleteMany: [AnnualExamSubjectSeriesScalarWhereInput!]
  upsert: [AnnualExamSubjectSeriesUpsertWithWhereUniqueNestedInput!]
}

input AnnualExamSubjectSeriesUpdateManyMutationInput {
  rankCode: String
}

input AnnualExamSubjectSeriesUpdateManyWithoutExamInput {
  create: [AnnualExamSubjectSeriesCreateWithoutExamInput!]
  connect: [AnnualExamSubjectSeriesWhereUniqueInput!]
  set: [AnnualExamSubjectSeriesWhereUniqueInput!]
  disconnect: [AnnualExamSubjectSeriesWhereUniqueInput!]
  delete: [AnnualExamSubjectSeriesWhereUniqueInput!]
  update: [AnnualExamSubjectSeriesUpdateWithWhereUniqueWithoutExamInput!]
  updateMany: [AnnualExamSubjectSeriesUpdateManyWithWhereNestedInput!]
  deleteMany: [AnnualExamSubjectSeriesScalarWhereInput!]
  upsert: [AnnualExamSubjectSeriesUpsertWithWhereUniqueWithoutExamInput!]
}

input AnnualExamSubjectSeriesUpdateManyWithoutSessionInput {
  create: [AnnualExamSubjectSeriesCreateWithoutSessionInput!]
  connect: [AnnualExamSubjectSeriesWhereUniqueInput!]
  set: [AnnualExamSubjectSeriesWhereUniqueInput!]
  disconnect: [AnnualExamSubjectSeriesWhereUniqueInput!]
  delete: [AnnualExamSubjectSeriesWhereUniqueInput!]
  update: [AnnualExamSubjectSeriesUpdateWithWhereUniqueWithoutSessionInput!]
  updateMany: [AnnualExamSubjectSeriesUpdateManyWithWhereNestedInput!]
  deleteMany: [AnnualExamSubjectSeriesScalarWhereInput!]
  upsert: [AnnualExamSubjectSeriesUpsertWithWhereUniqueWithoutSessionInput!]
}

input AnnualExamSubjectSeriesUpdateManyWithWhereNestedInput {
  where: AnnualExamSubjectSeriesScalarWhereInput!
  data: AnnualExamSubjectSeriesUpdateManyDataInput!
}

input AnnualExamSubjectSeriesUpdateOneRequiredWithoutScoreInput {
  create: AnnualExamSubjectSeriesCreateWithoutScoreInput
  connect: AnnualExamSubjectSeriesWhereUniqueInput
  update: AnnualExamSubjectSeriesUpdateWithoutScoreDataInput
  upsert: AnnualExamSubjectSeriesUpsertWithoutScoreInput
}

input AnnualExamSubjectSeriesUpdateWithoutExamDataInput {
  rankCode: String
  session: SessionUpdateOneRequiredWithoutAnnExamSeriesSubjInput
  center: CenterUpdateOneRequiredInput
  score: ScoreUpdateManyWithoutAnnExamSeriesSubjInput
}

input AnnualExamSubjectSeriesUpdateWithoutScoreDataInput {
  rankCode: String
  exam: ExamUpdateOneRequiredWithoutAnnExamSeriesSubjInput
  session: SessionUpdateOneRequiredWithoutAnnExamSeriesSubjInput
  center: CenterUpdateOneRequiredInput
}

input AnnualExamSubjectSeriesUpdateWithoutSessionDataInput {
  rankCode: String
  exam: ExamUpdateOneRequiredWithoutAnnExamSeriesSubjInput
  center: CenterUpdateOneRequiredInput
  score: ScoreUpdateManyWithoutAnnExamSeriesSubjInput
}

input AnnualExamSubjectSeriesUpdateWithWhereUniqueNestedInput {
  where: AnnualExamSubjectSeriesWhereUniqueInput!
  data: AnnualExamSubjectSeriesUpdateDataInput!
}

input AnnualExamSubjectSeriesUpdateWithWhereUniqueWithoutExamInput {
  where: AnnualExamSubjectSeriesWhereUniqueInput!
  data: AnnualExamSubjectSeriesUpdateWithoutExamDataInput!
}

input AnnualExamSubjectSeriesUpdateWithWhereUniqueWithoutSessionInput {
  where: AnnualExamSubjectSeriesWhereUniqueInput!
  data: AnnualExamSubjectSeriesUpdateWithoutSessionDataInput!
}

input AnnualExamSubjectSeriesUpsertWithoutScoreInput {
  update: AnnualExamSubjectSeriesUpdateWithoutScoreDataInput!
  create: AnnualExamSubjectSeriesCreateWithoutScoreInput!
}

input AnnualExamSubjectSeriesUpsertWithWhereUniqueNestedInput {
  where: AnnualExamSubjectSeriesWhereUniqueInput!
  update: AnnualExamSubjectSeriesUpdateDataInput!
  create: AnnualExamSubjectSeriesCreateInput!
}

input AnnualExamSubjectSeriesUpsertWithWhereUniqueWithoutExamInput {
  where: AnnualExamSubjectSeriesWhereUniqueInput!
  update: AnnualExamSubjectSeriesUpdateWithoutExamDataInput!
  create: AnnualExamSubjectSeriesCreateWithoutExamInput!
}

input AnnualExamSubjectSeriesUpsertWithWhereUniqueWithoutSessionInput {
  where: AnnualExamSubjectSeriesWhereUniqueInput!
  update: AnnualExamSubjectSeriesUpdateWithoutSessionDataInput!
  create: AnnualExamSubjectSeriesCreateWithoutSessionInput!
}

input AnnualExamSubjectSeriesWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnualExamSubjectSeriesWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnualExamSubjectSeriesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnualExamSubjectSeriesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rankCode: String

  """All values that are not equal to given value."""
  rankCode_not: String

  """All values that are contained in given list."""
  rankCode_in: [String!]

  """All values that are not contained in given list."""
  rankCode_not_in: [String!]

  """All values less than the given value."""
  rankCode_lt: String

  """All values less than or equal the given value."""
  rankCode_lte: String

  """All values greater than the given value."""
  rankCode_gt: String

  """All values greater than or equal the given value."""
  rankCode_gte: String

  """All values containing the given string."""
  rankCode_contains: String

  """All values not containing the given string."""
  rankCode_not_contains: String

  """All values starting with the given string."""
  rankCode_starts_with: String

  """All values not starting with the given string."""
  rankCode_not_starts_with: String

  """All values ending with the given string."""
  rankCode_ends_with: String

  """All values not ending with the given string."""
  rankCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  exam: ExamWhereInput
  session: SessionWhereInput
  center: CenterWhereInput
  score_every: ScoreWhereInput
  score_some: ScoreWhereInput
  score_none: ScoreWhereInput
}

input AnnualExamSubjectSeriesWhereUniqueInput {
  id: ID
}

type AnotherType implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AnotherTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnotherTypeEdge]!
  aggregate: AggregateAnotherType!
}

input AnotherTypeCreateInput {
  id: ID
}

"""An edge in a connection."""
type AnotherTypeEdge {
  """The item at the end of the edge."""
  node: AnotherType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnotherTypeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AnotherTypePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AnotherTypeSubscriptionPayload {
  mutation: MutationType!
  node: AnotherType
  updatedFields: [String!]
  previousValues: AnotherTypePreviousValues
}

input AnotherTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnotherTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnotherTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnotherTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnotherTypeWhereInput
}

input AnotherTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [AnotherTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnotherTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnotherTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input AnotherTypeWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Candidate implements Node {
  id: ID!
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  gender: Gender!
  registration(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration!]
}

"""A connection to a list of items."""
type CandidateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CandidateEdge]!
  aggregate: AggregateCandidate!
}

input CandidateCreateInput {
  id: ID
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  gender: GenderCreateOneWithoutCandidateInput!
  registration: RegistrationCreateManyWithoutCandidateInput
}

input CandidateCreateManyWithoutGenderInput {
  create: [CandidateCreateWithoutGenderInput!]
  connect: [CandidateWhereUniqueInput!]
}

input CandidateCreateOneWithoutRegistrationInput {
  create: CandidateCreateWithoutRegistrationInput
  connect: CandidateWhereUniqueInput
}

input CandidateCreateWithoutGenderInput {
  id: ID
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  registration: RegistrationCreateManyWithoutCandidateInput
}

input CandidateCreateWithoutRegistrationInput {
  id: ID
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  gender: GenderCreateOneWithoutCandidateInput!
}

"""An edge in a connection."""
type CandidateEdge {
  """The item at the end of the edge."""
  node: Candidate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CandidateOrderByInput {
  id_ASC
  id_DESC
  cand1stName_ASC
  cand1stName_DESC
  cand2ndName_ASC
  cand2ndName_DESC
  cand3rdName_ASC
  cand3rdName_DESC
  placeOfBirth_ASC
  placeOfBirth_DESC
  candCode_ASC
  candCode_DESC
  image_ASC
  image_DESC
  birthCertNumber_ASC
  birthCertNumber_DESC
  email_ASC
  email_DESC
  phoneNumb_ASC
  phoneNumb_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CandidatePreviousValues {
  id: ID!
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String!
  phoneNumb: Int
  dateOfBirth: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CandidateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandidateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandidateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cand1stName: String

  """All values that are not equal to given value."""
  cand1stName_not: String

  """All values that are contained in given list."""
  cand1stName_in: [String!]

  """All values that are not contained in given list."""
  cand1stName_not_in: [String!]

  """All values less than the given value."""
  cand1stName_lt: String

  """All values less than or equal the given value."""
  cand1stName_lte: String

  """All values greater than the given value."""
  cand1stName_gt: String

  """All values greater than or equal the given value."""
  cand1stName_gte: String

  """All values containing the given string."""
  cand1stName_contains: String

  """All values not containing the given string."""
  cand1stName_not_contains: String

  """All values starting with the given string."""
  cand1stName_starts_with: String

  """All values not starting with the given string."""
  cand1stName_not_starts_with: String

  """All values ending with the given string."""
  cand1stName_ends_with: String

  """All values not ending with the given string."""
  cand1stName_not_ends_with: String
  cand2ndName: String

  """All values that are not equal to given value."""
  cand2ndName_not: String

  """All values that are contained in given list."""
  cand2ndName_in: [String!]

  """All values that are not contained in given list."""
  cand2ndName_not_in: [String!]

  """All values less than the given value."""
  cand2ndName_lt: String

  """All values less than or equal the given value."""
  cand2ndName_lte: String

  """All values greater than the given value."""
  cand2ndName_gt: String

  """All values greater than or equal the given value."""
  cand2ndName_gte: String

  """All values containing the given string."""
  cand2ndName_contains: String

  """All values not containing the given string."""
  cand2ndName_not_contains: String

  """All values starting with the given string."""
  cand2ndName_starts_with: String

  """All values not starting with the given string."""
  cand2ndName_not_starts_with: String

  """All values ending with the given string."""
  cand2ndName_ends_with: String

  """All values not ending with the given string."""
  cand2ndName_not_ends_with: String
  cand3rdName: String

  """All values that are not equal to given value."""
  cand3rdName_not: String

  """All values that are contained in given list."""
  cand3rdName_in: [String!]

  """All values that are not contained in given list."""
  cand3rdName_not_in: [String!]

  """All values less than the given value."""
  cand3rdName_lt: String

  """All values less than or equal the given value."""
  cand3rdName_lte: String

  """All values greater than the given value."""
  cand3rdName_gt: String

  """All values greater than or equal the given value."""
  cand3rdName_gte: String

  """All values containing the given string."""
  cand3rdName_contains: String

  """All values not containing the given string."""
  cand3rdName_not_contains: String

  """All values starting with the given string."""
  cand3rdName_starts_with: String

  """All values not starting with the given string."""
  cand3rdName_not_starts_with: String

  """All values ending with the given string."""
  cand3rdName_ends_with: String

  """All values not ending with the given string."""
  cand3rdName_not_ends_with: String
  placeOfBirth: String

  """All values that are not equal to given value."""
  placeOfBirth_not: String

  """All values that are contained in given list."""
  placeOfBirth_in: [String!]

  """All values that are not contained in given list."""
  placeOfBirth_not_in: [String!]

  """All values less than the given value."""
  placeOfBirth_lt: String

  """All values less than or equal the given value."""
  placeOfBirth_lte: String

  """All values greater than the given value."""
  placeOfBirth_gt: String

  """All values greater than or equal the given value."""
  placeOfBirth_gte: String

  """All values containing the given string."""
  placeOfBirth_contains: String

  """All values not containing the given string."""
  placeOfBirth_not_contains: String

  """All values starting with the given string."""
  placeOfBirth_starts_with: String

  """All values not starting with the given string."""
  placeOfBirth_not_starts_with: String

  """All values ending with the given string."""
  placeOfBirth_ends_with: String

  """All values not ending with the given string."""
  placeOfBirth_not_ends_with: String
  candCode: String

  """All values that are not equal to given value."""
  candCode_not: String

  """All values that are contained in given list."""
  candCode_in: [String!]

  """All values that are not contained in given list."""
  candCode_not_in: [String!]

  """All values less than the given value."""
  candCode_lt: String

  """All values less than or equal the given value."""
  candCode_lte: String

  """All values greater than the given value."""
  candCode_gt: String

  """All values greater than or equal the given value."""
  candCode_gte: String

  """All values containing the given string."""
  candCode_contains: String

  """All values not containing the given string."""
  candCode_not_contains: String

  """All values starting with the given string."""
  candCode_starts_with: String

  """All values not starting with the given string."""
  candCode_not_starts_with: String

  """All values ending with the given string."""
  candCode_ends_with: String

  """All values not ending with the given string."""
  candCode_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  birthCertNumber: String

  """All values that are not equal to given value."""
  birthCertNumber_not: String

  """All values that are contained in given list."""
  birthCertNumber_in: [String!]

  """All values that are not contained in given list."""
  birthCertNumber_not_in: [String!]

  """All values less than the given value."""
  birthCertNumber_lt: String

  """All values less than or equal the given value."""
  birthCertNumber_lte: String

  """All values greater than the given value."""
  birthCertNumber_gt: String

  """All values greater than or equal the given value."""
  birthCertNumber_gte: String

  """All values containing the given string."""
  birthCertNumber_contains: String

  """All values not containing the given string."""
  birthCertNumber_not_contains: String

  """All values starting with the given string."""
  birthCertNumber_starts_with: String

  """All values not starting with the given string."""
  birthCertNumber_not_starts_with: String

  """All values ending with the given string."""
  birthCertNumber_ends_with: String

  """All values not ending with the given string."""
  birthCertNumber_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phoneNumb: Int

  """All values that are not equal to given value."""
  phoneNumb_not: Int

  """All values that are contained in given list."""
  phoneNumb_in: [Int!]

  """All values that are not contained in given list."""
  phoneNumb_not_in: [Int!]

  """All values less than the given value."""
  phoneNumb_lt: Int

  """All values less than or equal the given value."""
  phoneNumb_lte: Int

  """All values greater than the given value."""
  phoneNumb_gt: Int

  """All values greater than or equal the given value."""
  phoneNumb_gte: Int
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CandidateSubscriptionPayload {
  mutation: MutationType!
  node: Candidate
  updatedFields: [String!]
  previousValues: CandidatePreviousValues
}

input CandidateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandidateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandidateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CandidateWhereInput
}

input CandidateUpdateInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
  gender: GenderUpdateOneRequiredWithoutCandidateInput
  registration: RegistrationUpdateManyWithoutCandidateInput
}

input CandidateUpdateManyDataInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
}

input CandidateUpdateManyMutationInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
}

input CandidateUpdateManyWithoutGenderInput {
  create: [CandidateCreateWithoutGenderInput!]
  connect: [CandidateWhereUniqueInput!]
  set: [CandidateWhereUniqueInput!]
  disconnect: [CandidateWhereUniqueInput!]
  delete: [CandidateWhereUniqueInput!]
  update: [CandidateUpdateWithWhereUniqueWithoutGenderInput!]
  updateMany: [CandidateUpdateManyWithWhereNestedInput!]
  deleteMany: [CandidateScalarWhereInput!]
  upsert: [CandidateUpsertWithWhereUniqueWithoutGenderInput!]
}

input CandidateUpdateManyWithWhereNestedInput {
  where: CandidateScalarWhereInput!
  data: CandidateUpdateManyDataInput!
}

input CandidateUpdateOneRequiredWithoutRegistrationInput {
  create: CandidateCreateWithoutRegistrationInput
  connect: CandidateWhereUniqueInput
  update: CandidateUpdateWithoutRegistrationDataInput
  upsert: CandidateUpsertWithoutRegistrationInput
}

input CandidateUpdateWithoutGenderDataInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
  registration: RegistrationUpdateManyWithoutCandidateInput
}

input CandidateUpdateWithoutRegistrationDataInput {
  cand1stName: String
  cand2ndName: String
  cand3rdName: String
  placeOfBirth: String
  candCode: String
  image: String
  birthCertNumber: String
  email: String
  phoneNumb: Int
  dateOfBirth: DateTime
  gender: GenderUpdateOneRequiredWithoutCandidateInput
}

input CandidateUpdateWithWhereUniqueWithoutGenderInput {
  where: CandidateWhereUniqueInput!
  data: CandidateUpdateWithoutGenderDataInput!
}

input CandidateUpsertWithoutRegistrationInput {
  update: CandidateUpdateWithoutRegistrationDataInput!
  create: CandidateCreateWithoutRegistrationInput!
}

input CandidateUpsertWithWhereUniqueWithoutGenderInput {
  where: CandidateWhereUniqueInput!
  update: CandidateUpdateWithoutGenderDataInput!
  create: CandidateCreateWithoutGenderInput!
}

input CandidateWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandidateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandidateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cand1stName: String

  """All values that are not equal to given value."""
  cand1stName_not: String

  """All values that are contained in given list."""
  cand1stName_in: [String!]

  """All values that are not contained in given list."""
  cand1stName_not_in: [String!]

  """All values less than the given value."""
  cand1stName_lt: String

  """All values less than or equal the given value."""
  cand1stName_lte: String

  """All values greater than the given value."""
  cand1stName_gt: String

  """All values greater than or equal the given value."""
  cand1stName_gte: String

  """All values containing the given string."""
  cand1stName_contains: String

  """All values not containing the given string."""
  cand1stName_not_contains: String

  """All values starting with the given string."""
  cand1stName_starts_with: String

  """All values not starting with the given string."""
  cand1stName_not_starts_with: String

  """All values ending with the given string."""
  cand1stName_ends_with: String

  """All values not ending with the given string."""
  cand1stName_not_ends_with: String
  cand2ndName: String

  """All values that are not equal to given value."""
  cand2ndName_not: String

  """All values that are contained in given list."""
  cand2ndName_in: [String!]

  """All values that are not contained in given list."""
  cand2ndName_not_in: [String!]

  """All values less than the given value."""
  cand2ndName_lt: String

  """All values less than or equal the given value."""
  cand2ndName_lte: String

  """All values greater than the given value."""
  cand2ndName_gt: String

  """All values greater than or equal the given value."""
  cand2ndName_gte: String

  """All values containing the given string."""
  cand2ndName_contains: String

  """All values not containing the given string."""
  cand2ndName_not_contains: String

  """All values starting with the given string."""
  cand2ndName_starts_with: String

  """All values not starting with the given string."""
  cand2ndName_not_starts_with: String

  """All values ending with the given string."""
  cand2ndName_ends_with: String

  """All values not ending with the given string."""
  cand2ndName_not_ends_with: String
  cand3rdName: String

  """All values that are not equal to given value."""
  cand3rdName_not: String

  """All values that are contained in given list."""
  cand3rdName_in: [String!]

  """All values that are not contained in given list."""
  cand3rdName_not_in: [String!]

  """All values less than the given value."""
  cand3rdName_lt: String

  """All values less than or equal the given value."""
  cand3rdName_lte: String

  """All values greater than the given value."""
  cand3rdName_gt: String

  """All values greater than or equal the given value."""
  cand3rdName_gte: String

  """All values containing the given string."""
  cand3rdName_contains: String

  """All values not containing the given string."""
  cand3rdName_not_contains: String

  """All values starting with the given string."""
  cand3rdName_starts_with: String

  """All values not starting with the given string."""
  cand3rdName_not_starts_with: String

  """All values ending with the given string."""
  cand3rdName_ends_with: String

  """All values not ending with the given string."""
  cand3rdName_not_ends_with: String
  placeOfBirth: String

  """All values that are not equal to given value."""
  placeOfBirth_not: String

  """All values that are contained in given list."""
  placeOfBirth_in: [String!]

  """All values that are not contained in given list."""
  placeOfBirth_not_in: [String!]

  """All values less than the given value."""
  placeOfBirth_lt: String

  """All values less than or equal the given value."""
  placeOfBirth_lte: String

  """All values greater than the given value."""
  placeOfBirth_gt: String

  """All values greater than or equal the given value."""
  placeOfBirth_gte: String

  """All values containing the given string."""
  placeOfBirth_contains: String

  """All values not containing the given string."""
  placeOfBirth_not_contains: String

  """All values starting with the given string."""
  placeOfBirth_starts_with: String

  """All values not starting with the given string."""
  placeOfBirth_not_starts_with: String

  """All values ending with the given string."""
  placeOfBirth_ends_with: String

  """All values not ending with the given string."""
  placeOfBirth_not_ends_with: String
  candCode: String

  """All values that are not equal to given value."""
  candCode_not: String

  """All values that are contained in given list."""
  candCode_in: [String!]

  """All values that are not contained in given list."""
  candCode_not_in: [String!]

  """All values less than the given value."""
  candCode_lt: String

  """All values less than or equal the given value."""
  candCode_lte: String

  """All values greater than the given value."""
  candCode_gt: String

  """All values greater than or equal the given value."""
  candCode_gte: String

  """All values containing the given string."""
  candCode_contains: String

  """All values not containing the given string."""
  candCode_not_contains: String

  """All values starting with the given string."""
  candCode_starts_with: String

  """All values not starting with the given string."""
  candCode_not_starts_with: String

  """All values ending with the given string."""
  candCode_ends_with: String

  """All values not ending with the given string."""
  candCode_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  birthCertNumber: String

  """All values that are not equal to given value."""
  birthCertNumber_not: String

  """All values that are contained in given list."""
  birthCertNumber_in: [String!]

  """All values that are not contained in given list."""
  birthCertNumber_not_in: [String!]

  """All values less than the given value."""
  birthCertNumber_lt: String

  """All values less than or equal the given value."""
  birthCertNumber_lte: String

  """All values greater than the given value."""
  birthCertNumber_gt: String

  """All values greater than or equal the given value."""
  birthCertNumber_gte: String

  """All values containing the given string."""
  birthCertNumber_contains: String

  """All values not containing the given string."""
  birthCertNumber_not_contains: String

  """All values starting with the given string."""
  birthCertNumber_starts_with: String

  """All values not starting with the given string."""
  birthCertNumber_not_starts_with: String

  """All values ending with the given string."""
  birthCertNumber_ends_with: String

  """All values not ending with the given string."""
  birthCertNumber_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phoneNumb: Int

  """All values that are not equal to given value."""
  phoneNumb_not: Int

  """All values that are contained in given list."""
  phoneNumb_in: [Int!]

  """All values that are not contained in given list."""
  phoneNumb_not_in: [Int!]

  """All values less than the given value."""
  phoneNumb_lt: Int

  """All values less than or equal the given value."""
  phoneNumb_lte: Int

  """All values greater than the given value."""
  phoneNumb_gt: Int

  """All values greater than or equal the given value."""
  phoneNumb_gte: Int
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  gender: GenderWhereInput
  registration_every: RegistrationWhereInput
  registration_some: RegistrationWhereInput
  registration_none: RegistrationWhereInput
}

input CandidateWhereUniqueInput {
  id: ID
  email: String
}

type Center implements Node {
  id: ID!
  centerName: String!
  centerCode: String!
  town: Town!
  centerNumber: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  registration(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration!]
  centerAdmin(where: CenterAdminWhereInput, orderBy: CenterAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterAdmin!]
}

type CenterAdmin implements Node {
  id: ID!
  authName: String!
  authInstitution: String!
  authPhone: Int!
  authMatricue: String!
  rank: Rank!
  exam: Exam!
  session: Session!
  center: Center!
  createdAt: DateTime!
  updatedAt: DateTime!
  report(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report!]
}

"""A connection to a list of items."""
type CenterAdminConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CenterAdminEdge]!
  aggregate: AggregateCenterAdmin!
}

input CenterAdminCreateInput {
  id: ID
  authName: String!
  authInstitution: String!
  authPhone: Int!
  authMatricue: String!
  rank: RankCreateOneWithoutCenterAdminInput!
  exam: ExamCreateOneWithoutCenterAdminInput!
  session: SessionCreateOneWithoutCenterAdminInput!
  center: CenterCreateOneWithoutCenterAdminInput!
  report: ReportCreateManyWithoutCenterAdminInput
}

input CenterAdminCreateManyWithoutCenterInput {
  create: [CenterAdminCreateWithoutCenterInput!]
  connect: [CenterAdminWhereUniqueInput!]
}

input CenterAdminCreateManyWithoutExamInput {
  create: [CenterAdminCreateWithoutExamInput!]
  connect: [CenterAdminWhereUniqueInput!]
}

input CenterAdminCreateManyWithoutRankInput {
  create: [CenterAdminCreateWithoutRankInput!]
  connect: [CenterAdminWhereUniqueInput!]
}

input CenterAdminCreateManyWithoutSessionInput {
  create: [CenterAdminCreateWithoutSessionInput!]
  connect: [CenterAdminWhereUniqueInput!]
}

input CenterAdminCreateOneWithoutReportInput {
  create: CenterAdminCreateWithoutReportInput
  connect: CenterAdminWhereUniqueInput
}

input CenterAdminCreateWithoutCenterInput {
  id: ID
  authName: String!
  authInstitution: String!
  authPhone: Int!
  authMatricue: String!
  rank: RankCreateOneWithoutCenterAdminInput!
  exam: ExamCreateOneWithoutCenterAdminInput!
  session: SessionCreateOneWithoutCenterAdminInput!
  report: ReportCreateManyWithoutCenterAdminInput
}

input CenterAdminCreateWithoutExamInput {
  id: ID
  authName: String!
  authInstitution: String!
  authPhone: Int!
  authMatricue: String!
  rank: RankCreateOneWithoutCenterAdminInput!
  session: SessionCreateOneWithoutCenterAdminInput!
  center: CenterCreateOneWithoutCenterAdminInput!
  report: ReportCreateManyWithoutCenterAdminInput
}

input CenterAdminCreateWithoutRankInput {
  id: ID
  authName: String!
  authInstitution: String!
  authPhone: Int!
  authMatricue: String!
  exam: ExamCreateOneWithoutCenterAdminInput!
  session: SessionCreateOneWithoutCenterAdminInput!
  center: CenterCreateOneWithoutCenterAdminInput!
  report: ReportCreateManyWithoutCenterAdminInput
}

input CenterAdminCreateWithoutReportInput {
  id: ID
  authName: String!
  authInstitution: String!
  authPhone: Int!
  authMatricue: String!
  rank: RankCreateOneWithoutCenterAdminInput!
  exam: ExamCreateOneWithoutCenterAdminInput!
  session: SessionCreateOneWithoutCenterAdminInput!
  center: CenterCreateOneWithoutCenterAdminInput!
}

input CenterAdminCreateWithoutSessionInput {
  id: ID
  authName: String!
  authInstitution: String!
  authPhone: Int!
  authMatricue: String!
  rank: RankCreateOneWithoutCenterAdminInput!
  exam: ExamCreateOneWithoutCenterAdminInput!
  center: CenterCreateOneWithoutCenterAdminInput!
  report: ReportCreateManyWithoutCenterAdminInput
}

"""An edge in a connection."""
type CenterAdminEdge {
  """The item at the end of the edge."""
  node: CenterAdmin!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CenterAdminOrderByInput {
  id_ASC
  id_DESC
  authName_ASC
  authName_DESC
  authInstitution_ASC
  authInstitution_DESC
  authPhone_ASC
  authPhone_DESC
  authMatricue_ASC
  authMatricue_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CenterAdminPreviousValues {
  id: ID!
  authName: String!
  authInstitution: String!
  authPhone: Int!
  authMatricue: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CenterAdminScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterAdminScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterAdminScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterAdminScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  authName: String

  """All values that are not equal to given value."""
  authName_not: String

  """All values that are contained in given list."""
  authName_in: [String!]

  """All values that are not contained in given list."""
  authName_not_in: [String!]

  """All values less than the given value."""
  authName_lt: String

  """All values less than or equal the given value."""
  authName_lte: String

  """All values greater than the given value."""
  authName_gt: String

  """All values greater than or equal the given value."""
  authName_gte: String

  """All values containing the given string."""
  authName_contains: String

  """All values not containing the given string."""
  authName_not_contains: String

  """All values starting with the given string."""
  authName_starts_with: String

  """All values not starting with the given string."""
  authName_not_starts_with: String

  """All values ending with the given string."""
  authName_ends_with: String

  """All values not ending with the given string."""
  authName_not_ends_with: String
  authInstitution: String

  """All values that are not equal to given value."""
  authInstitution_not: String

  """All values that are contained in given list."""
  authInstitution_in: [String!]

  """All values that are not contained in given list."""
  authInstitution_not_in: [String!]

  """All values less than the given value."""
  authInstitution_lt: String

  """All values less than or equal the given value."""
  authInstitution_lte: String

  """All values greater than the given value."""
  authInstitution_gt: String

  """All values greater than or equal the given value."""
  authInstitution_gte: String

  """All values containing the given string."""
  authInstitution_contains: String

  """All values not containing the given string."""
  authInstitution_not_contains: String

  """All values starting with the given string."""
  authInstitution_starts_with: String

  """All values not starting with the given string."""
  authInstitution_not_starts_with: String

  """All values ending with the given string."""
  authInstitution_ends_with: String

  """All values not ending with the given string."""
  authInstitution_not_ends_with: String
  authPhone: Int

  """All values that are not equal to given value."""
  authPhone_not: Int

  """All values that are contained in given list."""
  authPhone_in: [Int!]

  """All values that are not contained in given list."""
  authPhone_not_in: [Int!]

  """All values less than the given value."""
  authPhone_lt: Int

  """All values less than or equal the given value."""
  authPhone_lte: Int

  """All values greater than the given value."""
  authPhone_gt: Int

  """All values greater than or equal the given value."""
  authPhone_gte: Int
  authMatricue: String

  """All values that are not equal to given value."""
  authMatricue_not: String

  """All values that are contained in given list."""
  authMatricue_in: [String!]

  """All values that are not contained in given list."""
  authMatricue_not_in: [String!]

  """All values less than the given value."""
  authMatricue_lt: String

  """All values less than or equal the given value."""
  authMatricue_lte: String

  """All values greater than the given value."""
  authMatricue_gt: String

  """All values greater than or equal the given value."""
  authMatricue_gte: String

  """All values containing the given string."""
  authMatricue_contains: String

  """All values not containing the given string."""
  authMatricue_not_contains: String

  """All values starting with the given string."""
  authMatricue_starts_with: String

  """All values not starting with the given string."""
  authMatricue_not_starts_with: String

  """All values ending with the given string."""
  authMatricue_ends_with: String

  """All values not ending with the given string."""
  authMatricue_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CenterAdminSubscriptionPayload {
  mutation: MutationType!
  node: CenterAdmin
  updatedFields: [String!]
  previousValues: CenterAdminPreviousValues
}

input CenterAdminSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterAdminSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterAdminSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterAdminSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CenterAdminWhereInput
}

input CenterAdminUpdateInput {
  authName: String
  authInstitution: String
  authPhone: Int
  authMatricue: String
  rank: RankUpdateOneRequiredWithoutCenterAdminInput
  exam: ExamUpdateOneRequiredWithoutCenterAdminInput
  session: SessionUpdateOneRequiredWithoutCenterAdminInput
  center: CenterUpdateOneRequiredWithoutCenterAdminInput
  report: ReportUpdateManyWithoutCenterAdminInput
}

input CenterAdminUpdateManyDataInput {
  authName: String
  authInstitution: String
  authPhone: Int
  authMatricue: String
}

input CenterAdminUpdateManyMutationInput {
  authName: String
  authInstitution: String
  authPhone: Int
  authMatricue: String
}

input CenterAdminUpdateManyWithoutCenterInput {
  create: [CenterAdminCreateWithoutCenterInput!]
  connect: [CenterAdminWhereUniqueInput!]
  set: [CenterAdminWhereUniqueInput!]
  disconnect: [CenterAdminWhereUniqueInput!]
  delete: [CenterAdminWhereUniqueInput!]
  update: [CenterAdminUpdateWithWhereUniqueWithoutCenterInput!]
  updateMany: [CenterAdminUpdateManyWithWhereNestedInput!]
  deleteMany: [CenterAdminScalarWhereInput!]
  upsert: [CenterAdminUpsertWithWhereUniqueWithoutCenterInput!]
}

input CenterAdminUpdateManyWithoutExamInput {
  create: [CenterAdminCreateWithoutExamInput!]
  connect: [CenterAdminWhereUniqueInput!]
  set: [CenterAdminWhereUniqueInput!]
  disconnect: [CenterAdminWhereUniqueInput!]
  delete: [CenterAdminWhereUniqueInput!]
  update: [CenterAdminUpdateWithWhereUniqueWithoutExamInput!]
  updateMany: [CenterAdminUpdateManyWithWhereNestedInput!]
  deleteMany: [CenterAdminScalarWhereInput!]
  upsert: [CenterAdminUpsertWithWhereUniqueWithoutExamInput!]
}

input CenterAdminUpdateManyWithoutRankInput {
  create: [CenterAdminCreateWithoutRankInput!]
  connect: [CenterAdminWhereUniqueInput!]
  set: [CenterAdminWhereUniqueInput!]
  disconnect: [CenterAdminWhereUniqueInput!]
  delete: [CenterAdminWhereUniqueInput!]
  update: [CenterAdminUpdateWithWhereUniqueWithoutRankInput!]
  updateMany: [CenterAdminUpdateManyWithWhereNestedInput!]
  deleteMany: [CenterAdminScalarWhereInput!]
  upsert: [CenterAdminUpsertWithWhereUniqueWithoutRankInput!]
}

input CenterAdminUpdateManyWithoutSessionInput {
  create: [CenterAdminCreateWithoutSessionInput!]
  connect: [CenterAdminWhereUniqueInput!]
  set: [CenterAdminWhereUniqueInput!]
  disconnect: [CenterAdminWhereUniqueInput!]
  delete: [CenterAdminWhereUniqueInput!]
  update: [CenterAdminUpdateWithWhereUniqueWithoutSessionInput!]
  updateMany: [CenterAdminUpdateManyWithWhereNestedInput!]
  deleteMany: [CenterAdminScalarWhereInput!]
  upsert: [CenterAdminUpsertWithWhereUniqueWithoutSessionInput!]
}

input CenterAdminUpdateManyWithWhereNestedInput {
  where: CenterAdminScalarWhereInput!
  data: CenterAdminUpdateManyDataInput!
}

input CenterAdminUpdateOneRequiredWithoutReportInput {
  create: CenterAdminCreateWithoutReportInput
  connect: CenterAdminWhereUniqueInput
  update: CenterAdminUpdateWithoutReportDataInput
  upsert: CenterAdminUpsertWithoutReportInput
}

input CenterAdminUpdateWithoutCenterDataInput {
  authName: String
  authInstitution: String
  authPhone: Int
  authMatricue: String
  rank: RankUpdateOneRequiredWithoutCenterAdminInput
  exam: ExamUpdateOneRequiredWithoutCenterAdminInput
  session: SessionUpdateOneRequiredWithoutCenterAdminInput
  report: ReportUpdateManyWithoutCenterAdminInput
}

input CenterAdminUpdateWithoutExamDataInput {
  authName: String
  authInstitution: String
  authPhone: Int
  authMatricue: String
  rank: RankUpdateOneRequiredWithoutCenterAdminInput
  session: SessionUpdateOneRequiredWithoutCenterAdminInput
  center: CenterUpdateOneRequiredWithoutCenterAdminInput
  report: ReportUpdateManyWithoutCenterAdminInput
}

input CenterAdminUpdateWithoutRankDataInput {
  authName: String
  authInstitution: String
  authPhone: Int
  authMatricue: String
  exam: ExamUpdateOneRequiredWithoutCenterAdminInput
  session: SessionUpdateOneRequiredWithoutCenterAdminInput
  center: CenterUpdateOneRequiredWithoutCenterAdminInput
  report: ReportUpdateManyWithoutCenterAdminInput
}

input CenterAdminUpdateWithoutReportDataInput {
  authName: String
  authInstitution: String
  authPhone: Int
  authMatricue: String
  rank: RankUpdateOneRequiredWithoutCenterAdminInput
  exam: ExamUpdateOneRequiredWithoutCenterAdminInput
  session: SessionUpdateOneRequiredWithoutCenterAdminInput
  center: CenterUpdateOneRequiredWithoutCenterAdminInput
}

input CenterAdminUpdateWithoutSessionDataInput {
  authName: String
  authInstitution: String
  authPhone: Int
  authMatricue: String
  rank: RankUpdateOneRequiredWithoutCenterAdminInput
  exam: ExamUpdateOneRequiredWithoutCenterAdminInput
  center: CenterUpdateOneRequiredWithoutCenterAdminInput
  report: ReportUpdateManyWithoutCenterAdminInput
}

input CenterAdminUpdateWithWhereUniqueWithoutCenterInput {
  where: CenterAdminWhereUniqueInput!
  data: CenterAdminUpdateWithoutCenterDataInput!
}

input CenterAdminUpdateWithWhereUniqueWithoutExamInput {
  where: CenterAdminWhereUniqueInput!
  data: CenterAdminUpdateWithoutExamDataInput!
}

input CenterAdminUpdateWithWhereUniqueWithoutRankInput {
  where: CenterAdminWhereUniqueInput!
  data: CenterAdminUpdateWithoutRankDataInput!
}

input CenterAdminUpdateWithWhereUniqueWithoutSessionInput {
  where: CenterAdminWhereUniqueInput!
  data: CenterAdminUpdateWithoutSessionDataInput!
}

input CenterAdminUpsertWithoutReportInput {
  update: CenterAdminUpdateWithoutReportDataInput!
  create: CenterAdminCreateWithoutReportInput!
}

input CenterAdminUpsertWithWhereUniqueWithoutCenterInput {
  where: CenterAdminWhereUniqueInput!
  update: CenterAdminUpdateWithoutCenterDataInput!
  create: CenterAdminCreateWithoutCenterInput!
}

input CenterAdminUpsertWithWhereUniqueWithoutExamInput {
  where: CenterAdminWhereUniqueInput!
  update: CenterAdminUpdateWithoutExamDataInput!
  create: CenterAdminCreateWithoutExamInput!
}

input CenterAdminUpsertWithWhereUniqueWithoutRankInput {
  where: CenterAdminWhereUniqueInput!
  update: CenterAdminUpdateWithoutRankDataInput!
  create: CenterAdminCreateWithoutRankInput!
}

input CenterAdminUpsertWithWhereUniqueWithoutSessionInput {
  where: CenterAdminWhereUniqueInput!
  update: CenterAdminUpdateWithoutSessionDataInput!
  create: CenterAdminCreateWithoutSessionInput!
}

input CenterAdminWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterAdminWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterAdminWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterAdminWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  authName: String

  """All values that are not equal to given value."""
  authName_not: String

  """All values that are contained in given list."""
  authName_in: [String!]

  """All values that are not contained in given list."""
  authName_not_in: [String!]

  """All values less than the given value."""
  authName_lt: String

  """All values less than or equal the given value."""
  authName_lte: String

  """All values greater than the given value."""
  authName_gt: String

  """All values greater than or equal the given value."""
  authName_gte: String

  """All values containing the given string."""
  authName_contains: String

  """All values not containing the given string."""
  authName_not_contains: String

  """All values starting with the given string."""
  authName_starts_with: String

  """All values not starting with the given string."""
  authName_not_starts_with: String

  """All values ending with the given string."""
  authName_ends_with: String

  """All values not ending with the given string."""
  authName_not_ends_with: String
  authInstitution: String

  """All values that are not equal to given value."""
  authInstitution_not: String

  """All values that are contained in given list."""
  authInstitution_in: [String!]

  """All values that are not contained in given list."""
  authInstitution_not_in: [String!]

  """All values less than the given value."""
  authInstitution_lt: String

  """All values less than or equal the given value."""
  authInstitution_lte: String

  """All values greater than the given value."""
  authInstitution_gt: String

  """All values greater than or equal the given value."""
  authInstitution_gte: String

  """All values containing the given string."""
  authInstitution_contains: String

  """All values not containing the given string."""
  authInstitution_not_contains: String

  """All values starting with the given string."""
  authInstitution_starts_with: String

  """All values not starting with the given string."""
  authInstitution_not_starts_with: String

  """All values ending with the given string."""
  authInstitution_ends_with: String

  """All values not ending with the given string."""
  authInstitution_not_ends_with: String
  authPhone: Int

  """All values that are not equal to given value."""
  authPhone_not: Int

  """All values that are contained in given list."""
  authPhone_in: [Int!]

  """All values that are not contained in given list."""
  authPhone_not_in: [Int!]

  """All values less than the given value."""
  authPhone_lt: Int

  """All values less than or equal the given value."""
  authPhone_lte: Int

  """All values greater than the given value."""
  authPhone_gt: Int

  """All values greater than or equal the given value."""
  authPhone_gte: Int
  authMatricue: String

  """All values that are not equal to given value."""
  authMatricue_not: String

  """All values that are contained in given list."""
  authMatricue_in: [String!]

  """All values that are not contained in given list."""
  authMatricue_not_in: [String!]

  """All values less than the given value."""
  authMatricue_lt: String

  """All values less than or equal the given value."""
  authMatricue_lte: String

  """All values greater than the given value."""
  authMatricue_gt: String

  """All values greater than or equal the given value."""
  authMatricue_gte: String

  """All values containing the given string."""
  authMatricue_contains: String

  """All values not containing the given string."""
  authMatricue_not_contains: String

  """All values starting with the given string."""
  authMatricue_starts_with: String

  """All values not starting with the given string."""
  authMatricue_not_starts_with: String

  """All values ending with the given string."""
  authMatricue_ends_with: String

  """All values not ending with the given string."""
  authMatricue_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  rank: RankWhereInput
  exam: ExamWhereInput
  session: SessionWhereInput
  center: CenterWhereInput
  report_every: ReportWhereInput
  report_some: ReportWhereInput
  report_none: ReportWhereInput
}

input CenterAdminWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type CenterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CenterEdge]!
  aggregate: AggregateCenter!
}

input CenterCreateInput {
  id: ID
  centerName: String!
  centerCode: String!
  centerNumber: Int!
  town: TownCreateOneWithoutCenterInput!
  registration: RegistrationCreateManyWithoutCenterInput
  centerAdmin: CenterAdminCreateManyWithoutCenterInput
}

input CenterCreateManyWithoutTownInput {
  create: [CenterCreateWithoutTownInput!]
  connect: [CenterWhereUniqueInput!]
}

input CenterCreateOneInput {
  create: CenterCreateInput
  connect: CenterWhereUniqueInput
}

input CenterCreateOneWithoutCenterAdminInput {
  create: CenterCreateWithoutCenterAdminInput
  connect: CenterWhereUniqueInput
}

input CenterCreateOneWithoutRegistrationInput {
  create: CenterCreateWithoutRegistrationInput
  connect: CenterWhereUniqueInput
}

input CenterCreateWithoutCenterAdminInput {
  id: ID
  centerName: String!
  centerCode: String!
  centerNumber: Int!
  town: TownCreateOneWithoutCenterInput!
  registration: RegistrationCreateManyWithoutCenterInput
}

input CenterCreateWithoutRegistrationInput {
  id: ID
  centerName: String!
  centerCode: String!
  centerNumber: Int!
  town: TownCreateOneWithoutCenterInput!
  centerAdmin: CenterAdminCreateManyWithoutCenterInput
}

input CenterCreateWithoutTownInput {
  id: ID
  centerName: String!
  centerCode: String!
  centerNumber: Int!
  registration: RegistrationCreateManyWithoutCenterInput
  centerAdmin: CenterAdminCreateManyWithoutCenterInput
}

"""An edge in a connection."""
type CenterEdge {
  """The item at the end of the edge."""
  node: Center!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CenterOrderByInput {
  id_ASC
  id_DESC
  centerName_ASC
  centerName_DESC
  centerCode_ASC
  centerCode_DESC
  centerNumber_ASC
  centerNumber_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CenterPreviousValues {
  id: ID!
  centerName: String!
  centerCode: String!
  centerNumber: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CenterScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  centerName: String

  """All values that are not equal to given value."""
  centerName_not: String

  """All values that are contained in given list."""
  centerName_in: [String!]

  """All values that are not contained in given list."""
  centerName_not_in: [String!]

  """All values less than the given value."""
  centerName_lt: String

  """All values less than or equal the given value."""
  centerName_lte: String

  """All values greater than the given value."""
  centerName_gt: String

  """All values greater than or equal the given value."""
  centerName_gte: String

  """All values containing the given string."""
  centerName_contains: String

  """All values not containing the given string."""
  centerName_not_contains: String

  """All values starting with the given string."""
  centerName_starts_with: String

  """All values not starting with the given string."""
  centerName_not_starts_with: String

  """All values ending with the given string."""
  centerName_ends_with: String

  """All values not ending with the given string."""
  centerName_not_ends_with: String
  centerCode: String

  """All values that are not equal to given value."""
  centerCode_not: String

  """All values that are contained in given list."""
  centerCode_in: [String!]

  """All values that are not contained in given list."""
  centerCode_not_in: [String!]

  """All values less than the given value."""
  centerCode_lt: String

  """All values less than or equal the given value."""
  centerCode_lte: String

  """All values greater than the given value."""
  centerCode_gt: String

  """All values greater than or equal the given value."""
  centerCode_gte: String

  """All values containing the given string."""
  centerCode_contains: String

  """All values not containing the given string."""
  centerCode_not_contains: String

  """All values starting with the given string."""
  centerCode_starts_with: String

  """All values not starting with the given string."""
  centerCode_not_starts_with: String

  """All values ending with the given string."""
  centerCode_ends_with: String

  """All values not ending with the given string."""
  centerCode_not_ends_with: String
  centerNumber: Int

  """All values that are not equal to given value."""
  centerNumber_not: Int

  """All values that are contained in given list."""
  centerNumber_in: [Int!]

  """All values that are not contained in given list."""
  centerNumber_not_in: [Int!]

  """All values less than the given value."""
  centerNumber_lt: Int

  """All values less than or equal the given value."""
  centerNumber_lte: Int

  """All values greater than the given value."""
  centerNumber_gt: Int

  """All values greater than or equal the given value."""
  centerNumber_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CenterSubscriptionPayload {
  mutation: MutationType!
  node: Center
  updatedFields: [String!]
  previousValues: CenterPreviousValues
}

input CenterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CenterWhereInput
}

input CenterUpdateDataInput {
  centerName: String
  centerCode: String
  centerNumber: Int
  town: TownUpdateOneRequiredWithoutCenterInput
  registration: RegistrationUpdateManyWithoutCenterInput
  centerAdmin: CenterAdminUpdateManyWithoutCenterInput
}

input CenterUpdateInput {
  centerName: String
  centerCode: String
  centerNumber: Int
  town: TownUpdateOneRequiredWithoutCenterInput
  registration: RegistrationUpdateManyWithoutCenterInput
  centerAdmin: CenterAdminUpdateManyWithoutCenterInput
}

input CenterUpdateManyDataInput {
  centerName: String
  centerCode: String
  centerNumber: Int
}

input CenterUpdateManyMutationInput {
  centerName: String
  centerCode: String
  centerNumber: Int
}

input CenterUpdateManyWithoutTownInput {
  create: [CenterCreateWithoutTownInput!]
  connect: [CenterWhereUniqueInput!]
  set: [CenterWhereUniqueInput!]
  disconnect: [CenterWhereUniqueInput!]
  delete: [CenterWhereUniqueInput!]
  update: [CenterUpdateWithWhereUniqueWithoutTownInput!]
  updateMany: [CenterUpdateManyWithWhereNestedInput!]
  deleteMany: [CenterScalarWhereInput!]
  upsert: [CenterUpsertWithWhereUniqueWithoutTownInput!]
}

input CenterUpdateManyWithWhereNestedInput {
  where: CenterScalarWhereInput!
  data: CenterUpdateManyDataInput!
}

input CenterUpdateOneRequiredInput {
  create: CenterCreateInput
  connect: CenterWhereUniqueInput
  update: CenterUpdateDataInput
  upsert: CenterUpsertNestedInput
}

input CenterUpdateOneRequiredWithoutCenterAdminInput {
  create: CenterCreateWithoutCenterAdminInput
  connect: CenterWhereUniqueInput
  update: CenterUpdateWithoutCenterAdminDataInput
  upsert: CenterUpsertWithoutCenterAdminInput
}

input CenterUpdateOneRequiredWithoutRegistrationInput {
  create: CenterCreateWithoutRegistrationInput
  connect: CenterWhereUniqueInput
  update: CenterUpdateWithoutRegistrationDataInput
  upsert: CenterUpsertWithoutRegistrationInput
}

input CenterUpdateWithoutCenterAdminDataInput {
  centerName: String
  centerCode: String
  centerNumber: Int
  town: TownUpdateOneRequiredWithoutCenterInput
  registration: RegistrationUpdateManyWithoutCenterInput
}

input CenterUpdateWithoutRegistrationDataInput {
  centerName: String
  centerCode: String
  centerNumber: Int
  town: TownUpdateOneRequiredWithoutCenterInput
  centerAdmin: CenterAdminUpdateManyWithoutCenterInput
}

input CenterUpdateWithoutTownDataInput {
  centerName: String
  centerCode: String
  centerNumber: Int
  registration: RegistrationUpdateManyWithoutCenterInput
  centerAdmin: CenterAdminUpdateManyWithoutCenterInput
}

input CenterUpdateWithWhereUniqueWithoutTownInput {
  where: CenterWhereUniqueInput!
  data: CenterUpdateWithoutTownDataInput!
}

input CenterUpsertNestedInput {
  update: CenterUpdateDataInput!
  create: CenterCreateInput!
}

input CenterUpsertWithoutCenterAdminInput {
  update: CenterUpdateWithoutCenterAdminDataInput!
  create: CenterCreateWithoutCenterAdminInput!
}

input CenterUpsertWithoutRegistrationInput {
  update: CenterUpdateWithoutRegistrationDataInput!
  create: CenterCreateWithoutRegistrationInput!
}

input CenterUpsertWithWhereUniqueWithoutTownInput {
  where: CenterWhereUniqueInput!
  update: CenterUpdateWithoutTownDataInput!
  create: CenterCreateWithoutTownInput!
}

input CenterWhereInput {
  """Logical AND on all given filters."""
  AND: [CenterWhereInput!]

  """Logical OR on all given filters."""
  OR: [CenterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CenterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  centerName: String

  """All values that are not equal to given value."""
  centerName_not: String

  """All values that are contained in given list."""
  centerName_in: [String!]

  """All values that are not contained in given list."""
  centerName_not_in: [String!]

  """All values less than the given value."""
  centerName_lt: String

  """All values less than or equal the given value."""
  centerName_lte: String

  """All values greater than the given value."""
  centerName_gt: String

  """All values greater than or equal the given value."""
  centerName_gte: String

  """All values containing the given string."""
  centerName_contains: String

  """All values not containing the given string."""
  centerName_not_contains: String

  """All values starting with the given string."""
  centerName_starts_with: String

  """All values not starting with the given string."""
  centerName_not_starts_with: String

  """All values ending with the given string."""
  centerName_ends_with: String

  """All values not ending with the given string."""
  centerName_not_ends_with: String
  centerCode: String

  """All values that are not equal to given value."""
  centerCode_not: String

  """All values that are contained in given list."""
  centerCode_in: [String!]

  """All values that are not contained in given list."""
  centerCode_not_in: [String!]

  """All values less than the given value."""
  centerCode_lt: String

  """All values less than or equal the given value."""
  centerCode_lte: String

  """All values greater than the given value."""
  centerCode_gt: String

  """All values greater than or equal the given value."""
  centerCode_gte: String

  """All values containing the given string."""
  centerCode_contains: String

  """All values not containing the given string."""
  centerCode_not_contains: String

  """All values starting with the given string."""
  centerCode_starts_with: String

  """All values not starting with the given string."""
  centerCode_not_starts_with: String

  """All values ending with the given string."""
  centerCode_ends_with: String

  """All values not ending with the given string."""
  centerCode_not_ends_with: String
  centerNumber: Int

  """All values that are not equal to given value."""
  centerNumber_not: Int

  """All values that are contained in given list."""
  centerNumber_in: [Int!]

  """All values that are not contained in given list."""
  centerNumber_not_in: [Int!]

  """All values less than the given value."""
  centerNumber_lt: Int

  """All values less than or equal the given value."""
  centerNumber_lte: Int

  """All values greater than the given value."""
  centerNumber_gt: Int

  """All values greater than or equal the given value."""
  centerNumber_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  town: TownWhereInput
  registration_every: RegistrationWhereInput
  registration_some: RegistrationWhereInput
  registration_none: RegistrationWhereInput
  centerAdmin_every: CenterAdminWhereInput
  centerAdmin_some: CenterAdminWhereInput
  centerAdmin_none: CenterAdminWhereInput
}

input CenterWhereUniqueInput {
  id: ID
  centerCode: String
  centerNumber: Int
}

scalar DateTime

type Division implements Node {
  id: ID!
  divName: String!
  divCode: String!
  region: Region!
  subDivision(where: SubDivisionWhereInput, orderBy: SubDivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubDivision!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DivisionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DivisionEdge]!
  aggregate: AggregateDivision!
}

input DivisionCreateInput {
  id: ID
  divName: String!
  divCode: String!
  region: RegionCreateOneWithoutDivisionInput!
  subDivision: SubDivisionCreateManyWithoutDivisionInput
}

input DivisionCreateManyWithoutRegionInput {
  create: [DivisionCreateWithoutRegionInput!]
  connect: [DivisionWhereUniqueInput!]
}

input DivisionCreateOneWithoutSubDivisionInput {
  create: DivisionCreateWithoutSubDivisionInput
  connect: DivisionWhereUniqueInput
}

input DivisionCreateWithoutRegionInput {
  id: ID
  divName: String!
  divCode: String!
  subDivision: SubDivisionCreateManyWithoutDivisionInput
}

input DivisionCreateWithoutSubDivisionInput {
  id: ID
  divName: String!
  divCode: String!
  region: RegionCreateOneWithoutDivisionInput!
}

"""An edge in a connection."""
type DivisionEdge {
  """The item at the end of the edge."""
  node: Division!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DivisionOrderByInput {
  id_ASC
  id_DESC
  divName_ASC
  divName_DESC
  divCode_ASC
  divCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DivisionPreviousValues {
  id: ID!
  divName: String!
  divCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DivisionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DivisionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DivisionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DivisionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  divName: String

  """All values that are not equal to given value."""
  divName_not: String

  """All values that are contained in given list."""
  divName_in: [String!]

  """All values that are not contained in given list."""
  divName_not_in: [String!]

  """All values less than the given value."""
  divName_lt: String

  """All values less than or equal the given value."""
  divName_lte: String

  """All values greater than the given value."""
  divName_gt: String

  """All values greater than or equal the given value."""
  divName_gte: String

  """All values containing the given string."""
  divName_contains: String

  """All values not containing the given string."""
  divName_not_contains: String

  """All values starting with the given string."""
  divName_starts_with: String

  """All values not starting with the given string."""
  divName_not_starts_with: String

  """All values ending with the given string."""
  divName_ends_with: String

  """All values not ending with the given string."""
  divName_not_ends_with: String
  divCode: String

  """All values that are not equal to given value."""
  divCode_not: String

  """All values that are contained in given list."""
  divCode_in: [String!]

  """All values that are not contained in given list."""
  divCode_not_in: [String!]

  """All values less than the given value."""
  divCode_lt: String

  """All values less than or equal the given value."""
  divCode_lte: String

  """All values greater than the given value."""
  divCode_gt: String

  """All values greater than or equal the given value."""
  divCode_gte: String

  """All values containing the given string."""
  divCode_contains: String

  """All values not containing the given string."""
  divCode_not_contains: String

  """All values starting with the given string."""
  divCode_starts_with: String

  """All values not starting with the given string."""
  divCode_not_starts_with: String

  """All values ending with the given string."""
  divCode_ends_with: String

  """All values not ending with the given string."""
  divCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DivisionSubscriptionPayload {
  mutation: MutationType!
  node: Division
  updatedFields: [String!]
  previousValues: DivisionPreviousValues
}

input DivisionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DivisionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DivisionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DivisionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DivisionWhereInput
}

input DivisionUpdateInput {
  divName: String
  divCode: String
  region: RegionUpdateOneRequiredWithoutDivisionInput
  subDivision: SubDivisionUpdateManyWithoutDivisionInput
}

input DivisionUpdateManyDataInput {
  divName: String
  divCode: String
}

input DivisionUpdateManyMutationInput {
  divName: String
  divCode: String
}

input DivisionUpdateManyWithoutRegionInput {
  create: [DivisionCreateWithoutRegionInput!]
  connect: [DivisionWhereUniqueInput!]
  set: [DivisionWhereUniqueInput!]
  disconnect: [DivisionWhereUniqueInput!]
  delete: [DivisionWhereUniqueInput!]
  update: [DivisionUpdateWithWhereUniqueWithoutRegionInput!]
  updateMany: [DivisionUpdateManyWithWhereNestedInput!]
  deleteMany: [DivisionScalarWhereInput!]
  upsert: [DivisionUpsertWithWhereUniqueWithoutRegionInput!]
}

input DivisionUpdateManyWithWhereNestedInput {
  where: DivisionScalarWhereInput!
  data: DivisionUpdateManyDataInput!
}

input DivisionUpdateOneRequiredWithoutSubDivisionInput {
  create: DivisionCreateWithoutSubDivisionInput
  connect: DivisionWhereUniqueInput
  update: DivisionUpdateWithoutSubDivisionDataInput
  upsert: DivisionUpsertWithoutSubDivisionInput
}

input DivisionUpdateWithoutRegionDataInput {
  divName: String
  divCode: String
  subDivision: SubDivisionUpdateManyWithoutDivisionInput
}

input DivisionUpdateWithoutSubDivisionDataInput {
  divName: String
  divCode: String
  region: RegionUpdateOneRequiredWithoutDivisionInput
}

input DivisionUpdateWithWhereUniqueWithoutRegionInput {
  where: DivisionWhereUniqueInput!
  data: DivisionUpdateWithoutRegionDataInput!
}

input DivisionUpsertWithoutSubDivisionInput {
  update: DivisionUpdateWithoutSubDivisionDataInput!
  create: DivisionCreateWithoutSubDivisionInput!
}

input DivisionUpsertWithWhereUniqueWithoutRegionInput {
  where: DivisionWhereUniqueInput!
  update: DivisionUpdateWithoutRegionDataInput!
  create: DivisionCreateWithoutRegionInput!
}

input DivisionWhereInput {
  """Logical AND on all given filters."""
  AND: [DivisionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DivisionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DivisionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  divName: String

  """All values that are not equal to given value."""
  divName_not: String

  """All values that are contained in given list."""
  divName_in: [String!]

  """All values that are not contained in given list."""
  divName_not_in: [String!]

  """All values less than the given value."""
  divName_lt: String

  """All values less than or equal the given value."""
  divName_lte: String

  """All values greater than the given value."""
  divName_gt: String

  """All values greater than or equal the given value."""
  divName_gte: String

  """All values containing the given string."""
  divName_contains: String

  """All values not containing the given string."""
  divName_not_contains: String

  """All values starting with the given string."""
  divName_starts_with: String

  """All values not starting with the given string."""
  divName_not_starts_with: String

  """All values ending with the given string."""
  divName_ends_with: String

  """All values not ending with the given string."""
  divName_not_ends_with: String
  divCode: String

  """All values that are not equal to given value."""
  divCode_not: String

  """All values that are contained in given list."""
  divCode_in: [String!]

  """All values that are not contained in given list."""
  divCode_not_in: [String!]

  """All values less than the given value."""
  divCode_lt: String

  """All values less than or equal the given value."""
  divCode_lte: String

  """All values greater than the given value."""
  divCode_gt: String

  """All values greater than or equal the given value."""
  divCode_gte: String

  """All values containing the given string."""
  divCode_contains: String

  """All values not containing the given string."""
  divCode_not_contains: String

  """All values starting with the given string."""
  divCode_starts_with: String

  """All values not starting with the given string."""
  divCode_not_starts_with: String

  """All values ending with the given string."""
  divCode_ends_with: String

  """All values not ending with the given string."""
  divCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  region: RegionWhereInput
  subDivision_every: SubDivisionWhereInput
  subDivision_some: SubDivisionWhereInput
  subDivision_none: SubDivisionWhereInput
}

input DivisionWhereUniqueInput {
  id: ID
  divCode: String
}

type EducationType implements Node {
  id: ID!
  educationTypeName: String
  educationTypeCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  series(where: SeriesWhereInput, orderBy: SeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Series!]
}

"""A connection to a list of items."""
type EducationTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EducationTypeEdge]!
  aggregate: AggregateEducationType!
}

input EducationTypeCreateInput {
  id: ID
  educationTypeName: String
  educationTypeCode: String!
  series: SeriesCreateManyWithoutEducationTypeInput
}

input EducationTypeCreateOneWithoutSeriesInput {
  create: EducationTypeCreateWithoutSeriesInput
  connect: EducationTypeWhereUniqueInput
}

input EducationTypeCreateWithoutSeriesInput {
  id: ID
  educationTypeName: String
  educationTypeCode: String!
}

"""An edge in a connection."""
type EducationTypeEdge {
  """The item at the end of the edge."""
  node: EducationType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EducationTypeOrderByInput {
  id_ASC
  id_DESC
  educationTypeName_ASC
  educationTypeName_DESC
  educationTypeCode_ASC
  educationTypeCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EducationTypePreviousValues {
  id: ID!
  educationTypeName: String
  educationTypeCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EducationTypeSubscriptionPayload {
  mutation: MutationType!
  node: EducationType
  updatedFields: [String!]
  previousValues: EducationTypePreviousValues
}

input EducationTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EducationTypeWhereInput
}

input EducationTypeUpdateInput {
  educationTypeName: String
  educationTypeCode: String
  series: SeriesUpdateManyWithoutEducationTypeInput
}

input EducationTypeUpdateManyMutationInput {
  educationTypeName: String
  educationTypeCode: String
}

input EducationTypeUpdateOneRequiredWithoutSeriesInput {
  create: EducationTypeCreateWithoutSeriesInput
  connect: EducationTypeWhereUniqueInput
  update: EducationTypeUpdateWithoutSeriesDataInput
  upsert: EducationTypeUpsertWithoutSeriesInput
}

input EducationTypeUpdateWithoutSeriesDataInput {
  educationTypeName: String
  educationTypeCode: String
}

input EducationTypeUpsertWithoutSeriesInput {
  update: EducationTypeUpdateWithoutSeriesDataInput!
  create: EducationTypeCreateWithoutSeriesInput!
}

input EducationTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  educationTypeName: String

  """All values that are not equal to given value."""
  educationTypeName_not: String

  """All values that are contained in given list."""
  educationTypeName_in: [String!]

  """All values that are not contained in given list."""
  educationTypeName_not_in: [String!]

  """All values less than the given value."""
  educationTypeName_lt: String

  """All values less than or equal the given value."""
  educationTypeName_lte: String

  """All values greater than the given value."""
  educationTypeName_gt: String

  """All values greater than or equal the given value."""
  educationTypeName_gte: String

  """All values containing the given string."""
  educationTypeName_contains: String

  """All values not containing the given string."""
  educationTypeName_not_contains: String

  """All values starting with the given string."""
  educationTypeName_starts_with: String

  """All values not starting with the given string."""
  educationTypeName_not_starts_with: String

  """All values ending with the given string."""
  educationTypeName_ends_with: String

  """All values not ending with the given string."""
  educationTypeName_not_ends_with: String
  educationTypeCode: String

  """All values that are not equal to given value."""
  educationTypeCode_not: String

  """All values that are contained in given list."""
  educationTypeCode_in: [String!]

  """All values that are not contained in given list."""
  educationTypeCode_not_in: [String!]

  """All values less than the given value."""
  educationTypeCode_lt: String

  """All values less than or equal the given value."""
  educationTypeCode_lte: String

  """All values greater than the given value."""
  educationTypeCode_gt: String

  """All values greater than or equal the given value."""
  educationTypeCode_gte: String

  """All values containing the given string."""
  educationTypeCode_contains: String

  """All values not containing the given string."""
  educationTypeCode_not_contains: String

  """All values starting with the given string."""
  educationTypeCode_starts_with: String

  """All values not starting with the given string."""
  educationTypeCode_not_starts_with: String

  """All values ending with the given string."""
  educationTypeCode_ends_with: String

  """All values not ending with the given string."""
  educationTypeCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  series_every: SeriesWhereInput
  series_some: SeriesWhereInput
  series_none: SeriesWhereInput
}

input EducationTypeWhereUniqueInput {
  id: ID
  educationTypeCode: String
}

type Exam implements Node {
  id: ID!
  examName: String!
  examCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  centerAdmin(where: CenterAdminWhereInput, orderBy: CenterAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterAdmin!]
  annExamSeriesSubj(where: AnnualExamSubjectSeriesWhereInput, orderBy: AnnualExamSubjectSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnnualExamSubjectSeries!]
  registration(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration!]
}

"""A connection to a list of items."""
type ExamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExamEdge]!
  aggregate: AggregateExam!
}

input ExamCreateInput {
  id: ID
  examName: String!
  examCode: String!
  centerAdmin: CenterAdminCreateManyWithoutExamInput
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateManyWithoutExamInput
  registration: RegistrationCreateManyWithoutExamInput
}

input ExamCreateOneWithoutAnnExamSeriesSubjInput {
  create: ExamCreateWithoutAnnExamSeriesSubjInput
  connect: ExamWhereUniqueInput
}

input ExamCreateOneWithoutCenterAdminInput {
  create: ExamCreateWithoutCenterAdminInput
  connect: ExamWhereUniqueInput
}

input ExamCreateOneWithoutRegistrationInput {
  create: ExamCreateWithoutRegistrationInput
  connect: ExamWhereUniqueInput
}

input ExamCreateWithoutAnnExamSeriesSubjInput {
  id: ID
  examName: String!
  examCode: String!
  centerAdmin: CenterAdminCreateManyWithoutExamInput
  registration: RegistrationCreateManyWithoutExamInput
}

input ExamCreateWithoutCenterAdminInput {
  id: ID
  examName: String!
  examCode: String!
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateManyWithoutExamInput
  registration: RegistrationCreateManyWithoutExamInput
}

input ExamCreateWithoutRegistrationInput {
  id: ID
  examName: String!
  examCode: String!
  centerAdmin: CenterAdminCreateManyWithoutExamInput
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateManyWithoutExamInput
}

"""An edge in a connection."""
type ExamEdge {
  """The item at the end of the edge."""
  node: Exam!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExamOrderByInput {
  id_ASC
  id_DESC
  examName_ASC
  examName_DESC
  examCode_ASC
  examCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExamPreviousValues {
  id: ID!
  examName: String!
  examCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExamSubscriptionPayload {
  mutation: MutationType!
  node: Exam
  updatedFields: [String!]
  previousValues: ExamPreviousValues
}

input ExamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExamWhereInput
}

input ExamUpdateInput {
  examName: String
  examCode: String
  centerAdmin: CenterAdminUpdateManyWithoutExamInput
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateManyWithoutExamInput
  registration: RegistrationUpdateManyWithoutExamInput
}

input ExamUpdateManyMutationInput {
  examName: String
  examCode: String
}

input ExamUpdateOneRequiredWithoutAnnExamSeriesSubjInput {
  create: ExamCreateWithoutAnnExamSeriesSubjInput
  connect: ExamWhereUniqueInput
  update: ExamUpdateWithoutAnnExamSeriesSubjDataInput
  upsert: ExamUpsertWithoutAnnExamSeriesSubjInput
}

input ExamUpdateOneRequiredWithoutCenterAdminInput {
  create: ExamCreateWithoutCenterAdminInput
  connect: ExamWhereUniqueInput
  update: ExamUpdateWithoutCenterAdminDataInput
  upsert: ExamUpsertWithoutCenterAdminInput
}

input ExamUpdateOneRequiredWithoutRegistrationInput {
  create: ExamCreateWithoutRegistrationInput
  connect: ExamWhereUniqueInput
  update: ExamUpdateWithoutRegistrationDataInput
  upsert: ExamUpsertWithoutRegistrationInput
}

input ExamUpdateWithoutAnnExamSeriesSubjDataInput {
  examName: String
  examCode: String
  centerAdmin: CenterAdminUpdateManyWithoutExamInput
  registration: RegistrationUpdateManyWithoutExamInput
}

input ExamUpdateWithoutCenterAdminDataInput {
  examName: String
  examCode: String
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateManyWithoutExamInput
  registration: RegistrationUpdateManyWithoutExamInput
}

input ExamUpdateWithoutRegistrationDataInput {
  examName: String
  examCode: String
  centerAdmin: CenterAdminUpdateManyWithoutExamInput
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateManyWithoutExamInput
}

input ExamUpsertWithoutAnnExamSeriesSubjInput {
  update: ExamUpdateWithoutAnnExamSeriesSubjDataInput!
  create: ExamCreateWithoutAnnExamSeriesSubjInput!
}

input ExamUpsertWithoutCenterAdminInput {
  update: ExamUpdateWithoutCenterAdminDataInput!
  create: ExamCreateWithoutCenterAdminInput!
}

input ExamUpsertWithoutRegistrationInput {
  update: ExamUpdateWithoutRegistrationDataInput!
  create: ExamCreateWithoutRegistrationInput!
}

input ExamWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  examName: String

  """All values that are not equal to given value."""
  examName_not: String

  """All values that are contained in given list."""
  examName_in: [String!]

  """All values that are not contained in given list."""
  examName_not_in: [String!]

  """All values less than the given value."""
  examName_lt: String

  """All values less than or equal the given value."""
  examName_lte: String

  """All values greater than the given value."""
  examName_gt: String

  """All values greater than or equal the given value."""
  examName_gte: String

  """All values containing the given string."""
  examName_contains: String

  """All values not containing the given string."""
  examName_not_contains: String

  """All values starting with the given string."""
  examName_starts_with: String

  """All values not starting with the given string."""
  examName_not_starts_with: String

  """All values ending with the given string."""
  examName_ends_with: String

  """All values not ending with the given string."""
  examName_not_ends_with: String
  examCode: String

  """All values that are not equal to given value."""
  examCode_not: String

  """All values that are contained in given list."""
  examCode_in: [String!]

  """All values that are not contained in given list."""
  examCode_not_in: [String!]

  """All values less than the given value."""
  examCode_lt: String

  """All values less than or equal the given value."""
  examCode_lte: String

  """All values greater than the given value."""
  examCode_gt: String

  """All values greater than or equal the given value."""
  examCode_gte: String

  """All values containing the given string."""
  examCode_contains: String

  """All values not containing the given string."""
  examCode_not_contains: String

  """All values starting with the given string."""
  examCode_starts_with: String

  """All values not starting with the given string."""
  examCode_not_starts_with: String

  """All values ending with the given string."""
  examCode_ends_with: String

  """All values not ending with the given string."""
  examCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  centerAdmin_every: CenterAdminWhereInput
  centerAdmin_some: CenterAdminWhereInput
  centerAdmin_none: CenterAdminWhereInput
  annExamSeriesSubj_every: AnnualExamSubjectSeriesWhereInput
  annExamSeriesSubj_some: AnnualExamSubjectSeriesWhereInput
  annExamSeriesSubj_none: AnnualExamSubjectSeriesWhereInput
  registration_every: RegistrationWhereInput
  registration_some: RegistrationWhereInput
  registration_none: RegistrationWhereInput
}

input ExamWhereUniqueInput {
  id: ID
  examCode: String
}

type Gender implements Node {
  id: ID!
  genderName: String!
  genderCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  candidate(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Candidate!]
}

"""A connection to a list of items."""
type GenderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GenderEdge]!
  aggregate: AggregateGender!
}

input GenderCreateInput {
  id: ID
  genderName: String!
  genderCode: String!
  candidate: CandidateCreateManyWithoutGenderInput
}

input GenderCreateOneWithoutCandidateInput {
  create: GenderCreateWithoutCandidateInput
  connect: GenderWhereUniqueInput
}

input GenderCreateWithoutCandidateInput {
  id: ID
  genderName: String!
  genderCode: String!
}

"""An edge in a connection."""
type GenderEdge {
  """The item at the end of the edge."""
  node: Gender!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GenderOrderByInput {
  id_ASC
  id_DESC
  genderName_ASC
  genderName_DESC
  genderCode_ASC
  genderCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GenderPreviousValues {
  id: ID!
  genderName: String!
  genderCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GenderSubscriptionPayload {
  mutation: MutationType!
  node: Gender
  updatedFields: [String!]
  previousValues: GenderPreviousValues
}

input GenderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GenderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GenderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GenderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GenderWhereInput
}

input GenderUpdateInput {
  genderName: String
  genderCode: String
  candidate: CandidateUpdateManyWithoutGenderInput
}

input GenderUpdateManyMutationInput {
  genderName: String
  genderCode: String
}

input GenderUpdateOneRequiredWithoutCandidateInput {
  create: GenderCreateWithoutCandidateInput
  connect: GenderWhereUniqueInput
  update: GenderUpdateWithoutCandidateDataInput
  upsert: GenderUpsertWithoutCandidateInput
}

input GenderUpdateWithoutCandidateDataInput {
  genderName: String
  genderCode: String
}

input GenderUpsertWithoutCandidateInput {
  update: GenderUpdateWithoutCandidateDataInput!
  create: GenderCreateWithoutCandidateInput!
}

input GenderWhereInput {
  """Logical AND on all given filters."""
  AND: [GenderWhereInput!]

  """Logical OR on all given filters."""
  OR: [GenderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GenderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  genderName: String

  """All values that are not equal to given value."""
  genderName_not: String

  """All values that are contained in given list."""
  genderName_in: [String!]

  """All values that are not contained in given list."""
  genderName_not_in: [String!]

  """All values less than the given value."""
  genderName_lt: String

  """All values less than or equal the given value."""
  genderName_lte: String

  """All values greater than the given value."""
  genderName_gt: String

  """All values greater than or equal the given value."""
  genderName_gte: String

  """All values containing the given string."""
  genderName_contains: String

  """All values not containing the given string."""
  genderName_not_contains: String

  """All values starting with the given string."""
  genderName_starts_with: String

  """All values not starting with the given string."""
  genderName_not_starts_with: String

  """All values ending with the given string."""
  genderName_ends_with: String

  """All values not ending with the given string."""
  genderName_not_ends_with: String
  genderCode: String

  """All values that are not equal to given value."""
  genderCode_not: String

  """All values that are contained in given list."""
  genderCode_in: [String!]

  """All values that are not contained in given list."""
  genderCode_not_in: [String!]

  """All values less than the given value."""
  genderCode_lt: String

  """All values less than or equal the given value."""
  genderCode_lte: String

  """All values greater than the given value."""
  genderCode_gt: String

  """All values greater than or equal the given value."""
  genderCode_gte: String

  """All values containing the given string."""
  genderCode_contains: String

  """All values not containing the given string."""
  genderCode_not_contains: String

  """All values starting with the given string."""
  genderCode_starts_with: String

  """All values not starting with the given string."""
  genderCode_not_starts_with: String

  """All values ending with the given string."""
  genderCode_ends_with: String

  """All values not ending with the given string."""
  genderCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  candidate_every: CandidateWhereInput
  candidate_some: CandidateWhereInput
  candidate_none: CandidateWhereInput
}

input GenderWhereUniqueInput {
  id: ID
  genderCode: String
}

type Item implements Node {
  id: ID!
  title: String!
  descrption: String!
  image: String
  largeImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  id: ID
  title: String!
  descrption: String!
  image: String
  largeImage: String
  user: UserCreateOneWithoutItemInput!
}

input ItemCreateManyWithoutUserInput {
  create: [ItemCreateWithoutUserInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutUserInput {
  id: ID
  title: String!
  descrption: String!
  image: String
  largeImage: String
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  descrption_ASC
  descrption_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ItemPreviousValues {
  id: ID!
  title: String!
  descrption: String!
  image: String
  largeImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  descrption: String

  """All values that are not equal to given value."""
  descrption_not: String

  """All values that are contained in given list."""
  descrption_in: [String!]

  """All values that are not contained in given list."""
  descrption_not_in: [String!]

  """All values less than the given value."""
  descrption_lt: String

  """All values less than or equal the given value."""
  descrption_lte: String

  """All values greater than the given value."""
  descrption_gt: String

  """All values greater than or equal the given value."""
  descrption_gte: String

  """All values containing the given string."""
  descrption_contains: String

  """All values not containing the given string."""
  descrption_not_contains: String

  """All values starting with the given string."""
  descrption_starts_with: String

  """All values not starting with the given string."""
  descrption_not_starts_with: String

  """All values ending with the given string."""
  descrption_ends_with: String

  """All values not ending with the given string."""
  descrption_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateInput {
  title: String
  descrption: String
  image: String
  largeImage: String
  user: UserUpdateOneRequiredWithoutItemInput
}

input ItemUpdateManyDataInput {
  title: String
  descrption: String
  image: String
  largeImage: String
}

input ItemUpdateManyMutationInput {
  title: String
  descrption: String
  image: String
  largeImage: String
}

input ItemUpdateManyWithoutUserInput {
  create: [ItemCreateWithoutUserInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutUserInput!]
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateWithoutUserDataInput {
  title: String
  descrption: String
  image: String
  largeImage: String
}

input ItemUpdateWithWhereUniqueWithoutUserInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutUserDataInput!
}

input ItemUpsertWithWhereUniqueWithoutUserInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutUserDataInput!
  create: ItemCreateWithoutUserInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  descrption: String

  """All values that are not equal to given value."""
  descrption_not: String

  """All values that are contained in given list."""
  descrption_in: [String!]

  """All values that are not contained in given list."""
  descrption_not_in: [String!]

  """All values less than the given value."""
  descrption_lt: String

  """All values less than or equal the given value."""
  descrption_lte: String

  """All values greater than the given value."""
  descrption_gt: String

  """All values greater than or equal the given value."""
  descrption_gte: String

  """All values containing the given string."""
  descrption_contains: String

  """All values not containing the given string."""
  descrption_not_contains: String

  """All values starting with the given string."""
  descrption_starts_with: String

  """All values not starting with the given string."""
  descrption_not_starts_with: String

  """All values ending with the given string."""
  descrption_ends_with: String

  """All values not ending with the given string."""
  descrption_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ItemWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createItem(data: ItemCreateInput!): Item!
  createRegion(data: RegionCreateInput!): Region!
  createDivision(data: DivisionCreateInput!): Division!
  createSubDivision(data: SubDivisionCreateInput!): SubDivision!
  createTown(data: TownCreateInput!): Town!
  createSeries(data: SeriesCreateInput!): Series!
  createEducationType(data: EducationTypeCreateInput!): EducationType!
  createExam(data: ExamCreateInput!): Exam!
  createSubject(data: SubjectCreateInput!): Subject!
  createPresence(data: PresenceCreateInput!): Presence!
  createSession(data: SessionCreateInput!): Session!
  createGender(data: GenderCreateInput!): Gender!
  createCandidate(data: CandidateCreateInput!): Candidate!
  createRank(data: RankCreateInput!): Rank!
  createCenterAdmin(data: CenterAdminCreateInput!): CenterAdmin!
  createReport(data: ReportCreateInput!): Report!
  createScore(data: ScoreCreateInput!): Score!
  createAnotherType(data: AnotherTypeCreateInput!): AnotherType!
  createCenter(data: CenterCreateInput!): Center!
  createAnnualExamSubjectSeries(data: AnnualExamSubjectSeriesCreateInput!): AnnualExamSubjectSeries!
  createRegistration(data: RegistrationCreateInput!): Registration!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateRegion(data: RegionUpdateInput!, where: RegionWhereUniqueInput!): Region
  updateDivision(data: DivisionUpdateInput!, where: DivisionWhereUniqueInput!): Division
  updateSubDivision(data: SubDivisionUpdateInput!, where: SubDivisionWhereUniqueInput!): SubDivision
  updateTown(data: TownUpdateInput!, where: TownWhereUniqueInput!): Town
  updateSeries(data: SeriesUpdateInput!, where: SeriesWhereUniqueInput!): Series
  updateEducationType(data: EducationTypeUpdateInput!, where: EducationTypeWhereUniqueInput!): EducationType
  updateExam(data: ExamUpdateInput!, where: ExamWhereUniqueInput!): Exam
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updatePresence(data: PresenceUpdateInput!, where: PresenceWhereUniqueInput!): Presence
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateGender(data: GenderUpdateInput!, where: GenderWhereUniqueInput!): Gender
  updateCandidate(data: CandidateUpdateInput!, where: CandidateWhereUniqueInput!): Candidate
  updateRank(data: RankUpdateInput!, where: RankWhereUniqueInput!): Rank
  updateCenterAdmin(data: CenterAdminUpdateInput!, where: CenterAdminWhereUniqueInput!): CenterAdmin
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
  updateScore(data: ScoreUpdateInput!, where: ScoreWhereUniqueInput!): Score
  updateCenter(data: CenterUpdateInput!, where: CenterWhereUniqueInput!): Center
  updateAnnualExamSubjectSeries(data: AnnualExamSubjectSeriesUpdateInput!, where: AnnualExamSubjectSeriesWhereUniqueInput!): AnnualExamSubjectSeries
  updateRegistration(data: RegistrationUpdateInput!, where: RegistrationWhereUniqueInput!): Registration
  deleteUser(where: UserWhereUniqueInput!): User
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteDivision(where: DivisionWhereUniqueInput!): Division
  deleteSubDivision(where: SubDivisionWhereUniqueInput!): SubDivision
  deleteTown(where: TownWhereUniqueInput!): Town
  deleteSeries(where: SeriesWhereUniqueInput!): Series
  deleteEducationType(where: EducationTypeWhereUniqueInput!): EducationType
  deleteExam(where: ExamWhereUniqueInput!): Exam
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deletePresence(where: PresenceWhereUniqueInput!): Presence
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteGender(where: GenderWhereUniqueInput!): Gender
  deleteCandidate(where: CandidateWhereUniqueInput!): Candidate
  deleteRank(where: RankWhereUniqueInput!): Rank
  deleteCenterAdmin(where: CenterAdminWhereUniqueInput!): CenterAdmin
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteScore(where: ScoreWhereUniqueInput!): Score
  deleteAnotherType(where: AnotherTypeWhereUniqueInput!): AnotherType
  deleteCenter(where: CenterWhereUniqueInput!): Center
  deleteAnnualExamSubjectSeries(where: AnnualExamSubjectSeriesWhereUniqueInput!): AnnualExamSubjectSeries
  deleteRegistration(where: RegistrationWhereUniqueInput!): Registration
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertRegion(where: RegionWhereUniqueInput!, create: RegionCreateInput!, update: RegionUpdateInput!): Region!
  upsertDivision(where: DivisionWhereUniqueInput!, create: DivisionCreateInput!, update: DivisionUpdateInput!): Division!
  upsertSubDivision(where: SubDivisionWhereUniqueInput!, create: SubDivisionCreateInput!, update: SubDivisionUpdateInput!): SubDivision!
  upsertTown(where: TownWhereUniqueInput!, create: TownCreateInput!, update: TownUpdateInput!): Town!
  upsertSeries(where: SeriesWhereUniqueInput!, create: SeriesCreateInput!, update: SeriesUpdateInput!): Series!
  upsertEducationType(where: EducationTypeWhereUniqueInput!, create: EducationTypeCreateInput!, update: EducationTypeUpdateInput!): EducationType!
  upsertExam(where: ExamWhereUniqueInput!, create: ExamCreateInput!, update: ExamUpdateInput!): Exam!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  upsertPresence(where: PresenceWhereUniqueInput!, create: PresenceCreateInput!, update: PresenceUpdateInput!): Presence!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  upsertGender(where: GenderWhereUniqueInput!, create: GenderCreateInput!, update: GenderUpdateInput!): Gender!
  upsertCandidate(where: CandidateWhereUniqueInput!, create: CandidateCreateInput!, update: CandidateUpdateInput!): Candidate!
  upsertRank(where: RankWhereUniqueInput!, create: RankCreateInput!, update: RankUpdateInput!): Rank!
  upsertCenterAdmin(where: CenterAdminWhereUniqueInput!, create: CenterAdminCreateInput!, update: CenterAdminUpdateInput!): CenterAdmin!
  upsertReport(where: ReportWhereUniqueInput!, create: ReportCreateInput!, update: ReportUpdateInput!): Report!
  upsertScore(where: ScoreWhereUniqueInput!, create: ScoreCreateInput!, update: ScoreUpdateInput!): Score!
  upsertCenter(where: CenterWhereUniqueInput!, create: CenterCreateInput!, update: CenterUpdateInput!): Center!
  upsertAnnualExamSubjectSeries(where: AnnualExamSubjectSeriesWhereUniqueInput!, create: AnnualExamSubjectSeriesCreateInput!, update: AnnualExamSubjectSeriesUpdateInput!): AnnualExamSubjectSeries!
  upsertRegistration(where: RegistrationWhereUniqueInput!, create: RegistrationCreateInput!, update: RegistrationUpdateInput!): Registration!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  updateManyRegions(data: RegionUpdateManyMutationInput!, where: RegionWhereInput): BatchPayload!
  updateManyDivisions(data: DivisionUpdateManyMutationInput!, where: DivisionWhereInput): BatchPayload!
  updateManySubDivisions(data: SubDivisionUpdateManyMutationInput!, where: SubDivisionWhereInput): BatchPayload!
  updateManyTowns(data: TownUpdateManyMutationInput!, where: TownWhereInput): BatchPayload!
  updateManySerieses(data: SeriesUpdateManyMutationInput!, where: SeriesWhereInput): BatchPayload!
  updateManyEducationTypes(data: EducationTypeUpdateManyMutationInput!, where: EducationTypeWhereInput): BatchPayload!
  updateManyExams(data: ExamUpdateManyMutationInput!, where: ExamWhereInput): BatchPayload!
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  updateManyPresences(data: PresenceUpdateManyMutationInput!, where: PresenceWhereInput): BatchPayload!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  updateManyGenders(data: GenderUpdateManyMutationInput!, where: GenderWhereInput): BatchPayload!
  updateManyCandidates(data: CandidateUpdateManyMutationInput!, where: CandidateWhereInput): BatchPayload!
  updateManyRanks(data: RankUpdateManyMutationInput!, where: RankWhereInput): BatchPayload!
  updateManyCenterAdmins(data: CenterAdminUpdateManyMutationInput!, where: CenterAdminWhereInput): BatchPayload!
  updateManyReports(data: ReportUpdateManyMutationInput!, where: ReportWhereInput): BatchPayload!
  updateManyScores(data: ScoreUpdateManyMutationInput!, where: ScoreWhereInput): BatchPayload!
  updateManyCenters(data: CenterUpdateManyMutationInput!, where: CenterWhereInput): BatchPayload!
  updateManyAnnualExamSubjectSerieses(data: AnnualExamSubjectSeriesUpdateManyMutationInput!, where: AnnualExamSubjectSeriesWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManyRegions(where: RegionWhereInput): BatchPayload!
  deleteManyDivisions(where: DivisionWhereInput): BatchPayload!
  deleteManySubDivisions(where: SubDivisionWhereInput): BatchPayload!
  deleteManyTowns(where: TownWhereInput): BatchPayload!
  deleteManySerieses(where: SeriesWhereInput): BatchPayload!
  deleteManyEducationTypes(where: EducationTypeWhereInput): BatchPayload!
  deleteManyExams(where: ExamWhereInput): BatchPayload!
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  deleteManyPresences(where: PresenceWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  deleteManyGenders(where: GenderWhereInput): BatchPayload!
  deleteManyCandidates(where: CandidateWhereInput): BatchPayload!
  deleteManyRanks(where: RankWhereInput): BatchPayload!
  deleteManyCenterAdmins(where: CenterAdminWhereInput): BatchPayload!
  deleteManyReports(where: ReportWhereInput): BatchPayload!
  deleteManyScores(where: ScoreWhereInput): BatchPayload!
  deleteManyAnotherTypes(where: AnotherTypeWhereInput): BatchPayload!
  deleteManyCenters(where: CenterWhereInput): BatchPayload!
  deleteManyAnnualExamSubjectSerieses(where: AnnualExamSubjectSeriesWhereInput): BatchPayload!
  deleteManyRegistrations(where: RegistrationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Presence implements Node {
  id: ID!
  presenceName: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  score(where: ScoreWhereInput, orderBy: ScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Score!]
}

"""A connection to a list of items."""
type PresenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PresenceEdge]!
  aggregate: AggregatePresence!
}

input PresenceCreateInput {
  id: ID
  presenceName: Boolean!
  score: ScoreCreateManyWithoutPresenceInput
}

input PresenceCreateOneWithoutScoreInput {
  create: PresenceCreateWithoutScoreInput
  connect: PresenceWhereUniqueInput
}

input PresenceCreateWithoutScoreInput {
  id: ID
  presenceName: Boolean!
}

"""An edge in a connection."""
type PresenceEdge {
  """The item at the end of the edge."""
  node: Presence!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PresenceOrderByInput {
  id_ASC
  id_DESC
  presenceName_ASC
  presenceName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PresencePreviousValues {
  id: ID!
  presenceName: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PresenceSubscriptionPayload {
  mutation: MutationType!
  node: Presence
  updatedFields: [String!]
  previousValues: PresencePreviousValues
}

input PresenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PresenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PresenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PresenceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PresenceWhereInput
}

input PresenceUpdateInput {
  presenceName: Boolean
  score: ScoreUpdateManyWithoutPresenceInput
}

input PresenceUpdateManyMutationInput {
  presenceName: Boolean
}

input PresenceUpdateOneRequiredWithoutScoreInput {
  create: PresenceCreateWithoutScoreInput
  connect: PresenceWhereUniqueInput
  update: PresenceUpdateWithoutScoreDataInput
  upsert: PresenceUpsertWithoutScoreInput
}

input PresenceUpdateWithoutScoreDataInput {
  presenceName: Boolean
}

input PresenceUpsertWithoutScoreInput {
  update: PresenceUpdateWithoutScoreDataInput!
  create: PresenceCreateWithoutScoreInput!
}

input PresenceWhereInput {
  """Logical AND on all given filters."""
  AND: [PresenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [PresenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PresenceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  presenceName: Boolean

  """All values that are not equal to given value."""
  presenceName_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  score_every: ScoreWhereInput
  score_some: ScoreWhereInput
  score_none: ScoreWhereInput
}

input PresenceWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  regions(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region]!
  divisions(where: DivisionWhereInput, orderBy: DivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Division]!
  subDivisions(where: SubDivisionWhereInput, orderBy: SubDivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubDivision]!
  towns(where: TownWhereInput, orderBy: TownOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Town]!
  serieses(where: SeriesWhereInput, orderBy: SeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Series]!
  educationTypes(where: EducationTypeWhereInput, orderBy: EducationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EducationType]!
  exams(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exam]!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  presences(where: PresenceWhereInput, orderBy: PresenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Presence]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  genders(where: GenderWhereInput, orderBy: GenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gender]!
  candidates(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Candidate]!
  ranks(where: RankWhereInput, orderBy: RankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rank]!
  centerAdmins(where: CenterAdminWhereInput, orderBy: CenterAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterAdmin]!
  reports(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report]!
  scores(where: ScoreWhereInput, orderBy: ScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Score]!
  anotherTypes(where: AnotherTypeWhereInput, orderBy: AnotherTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnotherType]!
  centers(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Center]!
  annualExamSubjectSerieses(where: AnnualExamSubjectSeriesWhereInput, orderBy: AnnualExamSubjectSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnnualExamSubjectSeries]!
  registrations(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration]!
  user(where: UserWhereUniqueInput!): User
  item(where: ItemWhereUniqueInput!): Item
  region(where: RegionWhereUniqueInput!): Region
  division(where: DivisionWhereUniqueInput!): Division
  subDivision(where: SubDivisionWhereUniqueInput!): SubDivision
  town(where: TownWhereUniqueInput!): Town
  series(where: SeriesWhereUniqueInput!): Series
  educationType(where: EducationTypeWhereUniqueInput!): EducationType
  exam(where: ExamWhereUniqueInput!): Exam
  subject(where: SubjectWhereUniqueInput!): Subject
  presence(where: PresenceWhereUniqueInput!): Presence
  session(where: SessionWhereUniqueInput!): Session
  gender(where: GenderWhereUniqueInput!): Gender
  candidate(where: CandidateWhereUniqueInput!): Candidate
  rank(where: RankWhereUniqueInput!): Rank
  centerAdmin(where: CenterAdminWhereUniqueInput!): CenterAdmin
  report(where: ReportWhereUniqueInput!): Report
  score(where: ScoreWhereUniqueInput!): Score
  anotherType(where: AnotherTypeWhereUniqueInput!): AnotherType
  center(where: CenterWhereUniqueInput!): Center
  annualExamSubjectSeries(where: AnnualExamSubjectSeriesWhereUniqueInput!): AnnualExamSubjectSeries
  registration(where: RegistrationWhereUniqueInput!): Registration
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  regionsConnection(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegionConnection!
  divisionsConnection(where: DivisionWhereInput, orderBy: DivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DivisionConnection!
  subDivisionsConnection(where: SubDivisionWhereInput, orderBy: SubDivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubDivisionConnection!
  townsConnection(where: TownWhereInput, orderBy: TownOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TownConnection!
  seriesesConnection(where: SeriesWhereInput, orderBy: SeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SeriesConnection!
  educationTypesConnection(where: EducationTypeWhereInput, orderBy: EducationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EducationTypeConnection!
  examsConnection(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExamConnection!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  presencesConnection(where: PresenceWhereInput, orderBy: PresenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PresenceConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  gendersConnection(where: GenderWhereInput, orderBy: GenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GenderConnection!
  candidatesConnection(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CandidateConnection!
  ranksConnection(where: RankWhereInput, orderBy: RankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RankConnection!
  centerAdminsConnection(where: CenterAdminWhereInput, orderBy: CenterAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CenterAdminConnection!
  reportsConnection(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReportConnection!
  scoresConnection(where: ScoreWhereInput, orderBy: ScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScoreConnection!
  anotherTypesConnection(where: AnotherTypeWhereInput, orderBy: AnotherTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnotherTypeConnection!
  centersConnection(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CenterConnection!
  annualExamSubjectSeriesesConnection(where: AnnualExamSubjectSeriesWhereInput, orderBy: AnnualExamSubjectSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnnualExamSubjectSeriesConnection!
  registrationsConnection(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegistrationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Rank implements Node {
  id: ID!
  rankName: String!
  rankCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  centerAdmin(where: CenterAdminWhereInput, orderBy: CenterAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterAdmin!]
}

"""A connection to a list of items."""
type RankConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RankEdge]!
  aggregate: AggregateRank!
}

input RankCreateInput {
  id: ID
  rankName: String!
  rankCode: String!
  centerAdmin: CenterAdminCreateManyWithoutRankInput
}

input RankCreateOneWithoutCenterAdminInput {
  create: RankCreateWithoutCenterAdminInput
  connect: RankWhereUniqueInput
}

input RankCreateWithoutCenterAdminInput {
  id: ID
  rankName: String!
  rankCode: String!
}

"""An edge in a connection."""
type RankEdge {
  """The item at the end of the edge."""
  node: Rank!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RankOrderByInput {
  id_ASC
  id_DESC
  rankName_ASC
  rankName_DESC
  rankCode_ASC
  rankCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RankPreviousValues {
  id: ID!
  rankName: String!
  rankCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RankSubscriptionPayload {
  mutation: MutationType!
  node: Rank
  updatedFields: [String!]
  previousValues: RankPreviousValues
}

input RankSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RankSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RankSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RankSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RankWhereInput
}

input RankUpdateInput {
  rankName: String
  rankCode: String
  centerAdmin: CenterAdminUpdateManyWithoutRankInput
}

input RankUpdateManyMutationInput {
  rankName: String
  rankCode: String
}

input RankUpdateOneRequiredWithoutCenterAdminInput {
  create: RankCreateWithoutCenterAdminInput
  connect: RankWhereUniqueInput
  update: RankUpdateWithoutCenterAdminDataInput
  upsert: RankUpsertWithoutCenterAdminInput
}

input RankUpdateWithoutCenterAdminDataInput {
  rankName: String
  rankCode: String
}

input RankUpsertWithoutCenterAdminInput {
  update: RankUpdateWithoutCenterAdminDataInput!
  create: RankCreateWithoutCenterAdminInput!
}

input RankWhereInput {
  """Logical AND on all given filters."""
  AND: [RankWhereInput!]

  """Logical OR on all given filters."""
  OR: [RankWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RankWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rankName: String

  """All values that are not equal to given value."""
  rankName_not: String

  """All values that are contained in given list."""
  rankName_in: [String!]

  """All values that are not contained in given list."""
  rankName_not_in: [String!]

  """All values less than the given value."""
  rankName_lt: String

  """All values less than or equal the given value."""
  rankName_lte: String

  """All values greater than the given value."""
  rankName_gt: String

  """All values greater than or equal the given value."""
  rankName_gte: String

  """All values containing the given string."""
  rankName_contains: String

  """All values not containing the given string."""
  rankName_not_contains: String

  """All values starting with the given string."""
  rankName_starts_with: String

  """All values not starting with the given string."""
  rankName_not_starts_with: String

  """All values ending with the given string."""
  rankName_ends_with: String

  """All values not ending with the given string."""
  rankName_not_ends_with: String
  rankCode: String

  """All values that are not equal to given value."""
  rankCode_not: String

  """All values that are contained in given list."""
  rankCode_in: [String!]

  """All values that are not contained in given list."""
  rankCode_not_in: [String!]

  """All values less than the given value."""
  rankCode_lt: String

  """All values less than or equal the given value."""
  rankCode_lte: String

  """All values greater than the given value."""
  rankCode_gt: String

  """All values greater than or equal the given value."""
  rankCode_gte: String

  """All values containing the given string."""
  rankCode_contains: String

  """All values not containing the given string."""
  rankCode_not_contains: String

  """All values starting with the given string."""
  rankCode_starts_with: String

  """All values not starting with the given string."""
  rankCode_not_starts_with: String

  """All values ending with the given string."""
  rankCode_ends_with: String

  """All values not ending with the given string."""
  rankCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  centerAdmin_every: CenterAdminWhereInput
  centerAdmin_some: CenterAdminWhereInput
  centerAdmin_none: CenterAdminWhereInput
}

input RankWhereUniqueInput {
  id: ID
}

type Region implements Node {
  id: ID!
  regName: String!
  regCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  division(where: DivisionWhereInput, orderBy: DivisionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Division!]
}

"""A connection to a list of items."""
type RegionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegionEdge]!
  aggregate: AggregateRegion!
}

input RegionCreateInput {
  id: ID
  regName: String!
  regCode: String!
  division: DivisionCreateManyWithoutRegionInput
}

input RegionCreateOneWithoutDivisionInput {
  create: RegionCreateWithoutDivisionInput
  connect: RegionWhereUniqueInput
}

input RegionCreateWithoutDivisionInput {
  id: ID
  regName: String!
  regCode: String!
}

"""An edge in a connection."""
type RegionEdge {
  """The item at the end of the edge."""
  node: Region!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RegionOrderByInput {
  id_ASC
  id_DESC
  regName_ASC
  regName_DESC
  regCode_ASC
  regCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RegionPreviousValues {
  id: ID!
  regName: String!
  regCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RegionSubscriptionPayload {
  mutation: MutationType!
  node: Region
  updatedFields: [String!]
  previousValues: RegionPreviousValues
}

input RegionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RegionWhereInput
}

input RegionUpdateInput {
  regName: String
  regCode: String
  division: DivisionUpdateManyWithoutRegionInput
}

input RegionUpdateManyMutationInput {
  regName: String
  regCode: String
}

input RegionUpdateOneRequiredWithoutDivisionInput {
  create: RegionCreateWithoutDivisionInput
  connect: RegionWhereUniqueInput
  update: RegionUpdateWithoutDivisionDataInput
  upsert: RegionUpsertWithoutDivisionInput
}

input RegionUpdateWithoutDivisionDataInput {
  regName: String
  regCode: String
}

input RegionUpsertWithoutDivisionInput {
  update: RegionUpdateWithoutDivisionDataInput!
  create: RegionCreateWithoutDivisionInput!
}

input RegionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  regName: String

  """All values that are not equal to given value."""
  regName_not: String

  """All values that are contained in given list."""
  regName_in: [String!]

  """All values that are not contained in given list."""
  regName_not_in: [String!]

  """All values less than the given value."""
  regName_lt: String

  """All values less than or equal the given value."""
  regName_lte: String

  """All values greater than the given value."""
  regName_gt: String

  """All values greater than or equal the given value."""
  regName_gte: String

  """All values containing the given string."""
  regName_contains: String

  """All values not containing the given string."""
  regName_not_contains: String

  """All values starting with the given string."""
  regName_starts_with: String

  """All values not starting with the given string."""
  regName_not_starts_with: String

  """All values ending with the given string."""
  regName_ends_with: String

  """All values not ending with the given string."""
  regName_not_ends_with: String
  regCode: String

  """All values that are not equal to given value."""
  regCode_not: String

  """All values that are contained in given list."""
  regCode_in: [String!]

  """All values that are not contained in given list."""
  regCode_not_in: [String!]

  """All values less than the given value."""
  regCode_lt: String

  """All values less than or equal the given value."""
  regCode_lte: String

  """All values greater than the given value."""
  regCode_gt: String

  """All values greater than or equal the given value."""
  regCode_gte: String

  """All values containing the given string."""
  regCode_contains: String

  """All values not containing the given string."""
  regCode_not_contains: String

  """All values starting with the given string."""
  regCode_starts_with: String

  """All values not starting with the given string."""
  regCode_not_starts_with: String

  """All values ending with the given string."""
  regCode_ends_with: String

  """All values not ending with the given string."""
  regCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  division_every: DivisionWhereInput
  division_some: DivisionWhereInput
  division_none: DivisionWhereInput
}

input RegionWhereUniqueInput {
  id: ID
  regCode: String
}

type Registration implements Node {
  id: ID!
  candidate: Candidate!
  createdAt: DateTime!
  updatedAt: DateTime!
  exam: Exam!
  series: Series!
  session: Session!
  center: Center!
}

"""A connection to a list of items."""
type RegistrationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegistrationEdge]!
  aggregate: AggregateRegistration!
}

input RegistrationCreateInput {
  id: ID
  candidate: CandidateCreateOneWithoutRegistrationInput!
  exam: ExamCreateOneWithoutRegistrationInput!
  series: SeriesCreateOneWithoutRegistrationInput!
  session: SessionCreateOneWithoutRegistrationInput!
  center: CenterCreateOneWithoutRegistrationInput!
}

input RegistrationCreateManyWithoutCandidateInput {
  create: [RegistrationCreateWithoutCandidateInput!]
  connect: [RegistrationWhereUniqueInput!]
}

input RegistrationCreateManyWithoutCenterInput {
  create: [RegistrationCreateWithoutCenterInput!]
  connect: [RegistrationWhereUniqueInput!]
}

input RegistrationCreateManyWithoutExamInput {
  create: [RegistrationCreateWithoutExamInput!]
  connect: [RegistrationWhereUniqueInput!]
}

input RegistrationCreateManyWithoutSeriesInput {
  create: [RegistrationCreateWithoutSeriesInput!]
  connect: [RegistrationWhereUniqueInput!]
}

input RegistrationCreateManyWithoutSessionInput {
  create: [RegistrationCreateWithoutSessionInput!]
  connect: [RegistrationWhereUniqueInput!]
}

input RegistrationCreateOneInput {
  create: RegistrationCreateInput
  connect: RegistrationWhereUniqueInput
}

input RegistrationCreateWithoutCandidateInput {
  id: ID
  exam: ExamCreateOneWithoutRegistrationInput!
  series: SeriesCreateOneWithoutRegistrationInput!
  session: SessionCreateOneWithoutRegistrationInput!
  center: CenterCreateOneWithoutRegistrationInput!
}

input RegistrationCreateWithoutCenterInput {
  id: ID
  candidate: CandidateCreateOneWithoutRegistrationInput!
  exam: ExamCreateOneWithoutRegistrationInput!
  series: SeriesCreateOneWithoutRegistrationInput!
  session: SessionCreateOneWithoutRegistrationInput!
}

input RegistrationCreateWithoutExamInput {
  id: ID
  candidate: CandidateCreateOneWithoutRegistrationInput!
  series: SeriesCreateOneWithoutRegistrationInput!
  session: SessionCreateOneWithoutRegistrationInput!
  center: CenterCreateOneWithoutRegistrationInput!
}

input RegistrationCreateWithoutSeriesInput {
  id: ID
  candidate: CandidateCreateOneWithoutRegistrationInput!
  exam: ExamCreateOneWithoutRegistrationInput!
  session: SessionCreateOneWithoutRegistrationInput!
  center: CenterCreateOneWithoutRegistrationInput!
}

input RegistrationCreateWithoutSessionInput {
  id: ID
  candidate: CandidateCreateOneWithoutRegistrationInput!
  exam: ExamCreateOneWithoutRegistrationInput!
  series: SeriesCreateOneWithoutRegistrationInput!
  center: CenterCreateOneWithoutRegistrationInput!
}

"""An edge in a connection."""
type RegistrationEdge {
  """The item at the end of the edge."""
  node: Registration!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RegistrationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RegistrationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RegistrationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RegistrationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegistrationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegistrationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RegistrationSubscriptionPayload {
  mutation: MutationType!
  node: Registration
  updatedFields: [String!]
  previousValues: RegistrationPreviousValues
}

input RegistrationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegistrationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegistrationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegistrationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RegistrationWhereInput
}

input RegistrationUpdateDataInput {
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  exam: ExamUpdateOneRequiredWithoutRegistrationInput
  series: SeriesUpdateOneRequiredWithoutRegistrationInput
  session: SessionUpdateOneRequiredWithoutRegistrationInput
  center: CenterUpdateOneRequiredWithoutRegistrationInput
}

input RegistrationUpdateInput {
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  exam: ExamUpdateOneRequiredWithoutRegistrationInput
  series: SeriesUpdateOneRequiredWithoutRegistrationInput
  session: SessionUpdateOneRequiredWithoutRegistrationInput
  center: CenterUpdateOneRequiredWithoutRegistrationInput
}

input RegistrationUpdateManyWithoutCandidateInput {
  create: [RegistrationCreateWithoutCandidateInput!]
  connect: [RegistrationWhereUniqueInput!]
  set: [RegistrationWhereUniqueInput!]
  disconnect: [RegistrationWhereUniqueInput!]
  delete: [RegistrationWhereUniqueInput!]
  update: [RegistrationUpdateWithWhereUniqueWithoutCandidateInput!]
  deleteMany: [RegistrationScalarWhereInput!]
  upsert: [RegistrationUpsertWithWhereUniqueWithoutCandidateInput!]
}

input RegistrationUpdateManyWithoutCenterInput {
  create: [RegistrationCreateWithoutCenterInput!]
  connect: [RegistrationWhereUniqueInput!]
  set: [RegistrationWhereUniqueInput!]
  disconnect: [RegistrationWhereUniqueInput!]
  delete: [RegistrationWhereUniqueInput!]
  update: [RegistrationUpdateWithWhereUniqueWithoutCenterInput!]
  deleteMany: [RegistrationScalarWhereInput!]
  upsert: [RegistrationUpsertWithWhereUniqueWithoutCenterInput!]
}

input RegistrationUpdateManyWithoutExamInput {
  create: [RegistrationCreateWithoutExamInput!]
  connect: [RegistrationWhereUniqueInput!]
  set: [RegistrationWhereUniqueInput!]
  disconnect: [RegistrationWhereUniqueInput!]
  delete: [RegistrationWhereUniqueInput!]
  update: [RegistrationUpdateWithWhereUniqueWithoutExamInput!]
  deleteMany: [RegistrationScalarWhereInput!]
  upsert: [RegistrationUpsertWithWhereUniqueWithoutExamInput!]
}

input RegistrationUpdateManyWithoutSeriesInput {
  create: [RegistrationCreateWithoutSeriesInput!]
  connect: [RegistrationWhereUniqueInput!]
  set: [RegistrationWhereUniqueInput!]
  disconnect: [RegistrationWhereUniqueInput!]
  delete: [RegistrationWhereUniqueInput!]
  update: [RegistrationUpdateWithWhereUniqueWithoutSeriesInput!]
  deleteMany: [RegistrationScalarWhereInput!]
  upsert: [RegistrationUpsertWithWhereUniqueWithoutSeriesInput!]
}

input RegistrationUpdateManyWithoutSessionInput {
  create: [RegistrationCreateWithoutSessionInput!]
  connect: [RegistrationWhereUniqueInput!]
  set: [RegistrationWhereUniqueInput!]
  disconnect: [RegistrationWhereUniqueInput!]
  delete: [RegistrationWhereUniqueInput!]
  update: [RegistrationUpdateWithWhereUniqueWithoutSessionInput!]
  deleteMany: [RegistrationScalarWhereInput!]
  upsert: [RegistrationUpsertWithWhereUniqueWithoutSessionInput!]
}

input RegistrationUpdateOneRequiredInput {
  create: RegistrationCreateInput
  connect: RegistrationWhereUniqueInput
  update: RegistrationUpdateDataInput
  upsert: RegistrationUpsertNestedInput
}

input RegistrationUpdateWithoutCandidateDataInput {
  exam: ExamUpdateOneRequiredWithoutRegistrationInput
  series: SeriesUpdateOneRequiredWithoutRegistrationInput
  session: SessionUpdateOneRequiredWithoutRegistrationInput
  center: CenterUpdateOneRequiredWithoutRegistrationInput
}

input RegistrationUpdateWithoutCenterDataInput {
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  exam: ExamUpdateOneRequiredWithoutRegistrationInput
  series: SeriesUpdateOneRequiredWithoutRegistrationInput
  session: SessionUpdateOneRequiredWithoutRegistrationInput
}

input RegistrationUpdateWithoutExamDataInput {
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  series: SeriesUpdateOneRequiredWithoutRegistrationInput
  session: SessionUpdateOneRequiredWithoutRegistrationInput
  center: CenterUpdateOneRequiredWithoutRegistrationInput
}

input RegistrationUpdateWithoutSeriesDataInput {
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  exam: ExamUpdateOneRequiredWithoutRegistrationInput
  session: SessionUpdateOneRequiredWithoutRegistrationInput
  center: CenterUpdateOneRequiredWithoutRegistrationInput
}

input RegistrationUpdateWithoutSessionDataInput {
  candidate: CandidateUpdateOneRequiredWithoutRegistrationInput
  exam: ExamUpdateOneRequiredWithoutRegistrationInput
  series: SeriesUpdateOneRequiredWithoutRegistrationInput
  center: CenterUpdateOneRequiredWithoutRegistrationInput
}

input RegistrationUpdateWithWhereUniqueWithoutCandidateInput {
  where: RegistrationWhereUniqueInput!
  data: RegistrationUpdateWithoutCandidateDataInput!
}

input RegistrationUpdateWithWhereUniqueWithoutCenterInput {
  where: RegistrationWhereUniqueInput!
  data: RegistrationUpdateWithoutCenterDataInput!
}

input RegistrationUpdateWithWhereUniqueWithoutExamInput {
  where: RegistrationWhereUniqueInput!
  data: RegistrationUpdateWithoutExamDataInput!
}

input RegistrationUpdateWithWhereUniqueWithoutSeriesInput {
  where: RegistrationWhereUniqueInput!
  data: RegistrationUpdateWithoutSeriesDataInput!
}

input RegistrationUpdateWithWhereUniqueWithoutSessionInput {
  where: RegistrationWhereUniqueInput!
  data: RegistrationUpdateWithoutSessionDataInput!
}

input RegistrationUpsertNestedInput {
  update: RegistrationUpdateDataInput!
  create: RegistrationCreateInput!
}

input RegistrationUpsertWithWhereUniqueWithoutCandidateInput {
  where: RegistrationWhereUniqueInput!
  update: RegistrationUpdateWithoutCandidateDataInput!
  create: RegistrationCreateWithoutCandidateInput!
}

input RegistrationUpsertWithWhereUniqueWithoutCenterInput {
  where: RegistrationWhereUniqueInput!
  update: RegistrationUpdateWithoutCenterDataInput!
  create: RegistrationCreateWithoutCenterInput!
}

input RegistrationUpsertWithWhereUniqueWithoutExamInput {
  where: RegistrationWhereUniqueInput!
  update: RegistrationUpdateWithoutExamDataInput!
  create: RegistrationCreateWithoutExamInput!
}

input RegistrationUpsertWithWhereUniqueWithoutSeriesInput {
  where: RegistrationWhereUniqueInput!
  update: RegistrationUpdateWithoutSeriesDataInput!
  create: RegistrationCreateWithoutSeriesInput!
}

input RegistrationUpsertWithWhereUniqueWithoutSessionInput {
  where: RegistrationWhereUniqueInput!
  update: RegistrationUpdateWithoutSessionDataInput!
  create: RegistrationCreateWithoutSessionInput!
}

input RegistrationWhereInput {
  """Logical AND on all given filters."""
  AND: [RegistrationWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegistrationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegistrationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  candidate: CandidateWhereInput
  exam: ExamWhereInput
  series: SeriesWhereInput
  session: SessionWhereInput
  center: CenterWhereInput
}

input RegistrationWhereUniqueInput {
  id: ID
}

type Report implements Node {
  id: ID!
  reportName: String!
  reportCode: String!
  centerAdmin: CenterAdmin!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportEdge]!
  aggregate: AggregateReport!
}

input ReportCreateInput {
  id: ID
  reportName: String!
  reportCode: String!
  centerAdmin: CenterAdminCreateOneWithoutReportInput!
}

input ReportCreateManyWithoutCenterAdminInput {
  create: [ReportCreateWithoutCenterAdminInput!]
  connect: [ReportWhereUniqueInput!]
}

input ReportCreateWithoutCenterAdminInput {
  id: ID
  reportName: String!
  reportCode: String!
}

"""An edge in a connection."""
type ReportEdge {
  """The item at the end of the edge."""
  node: Report!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReportOrderByInput {
  id_ASC
  id_DESC
  reportName_ASC
  reportName_DESC
  reportCode_ASC
  reportCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReportPreviousValues {
  id: ID!
  reportName: String!
  reportCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReportScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReportScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReportScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReportScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reportName: String

  """All values that are not equal to given value."""
  reportName_not: String

  """All values that are contained in given list."""
  reportName_in: [String!]

  """All values that are not contained in given list."""
  reportName_not_in: [String!]

  """All values less than the given value."""
  reportName_lt: String

  """All values less than or equal the given value."""
  reportName_lte: String

  """All values greater than the given value."""
  reportName_gt: String

  """All values greater than or equal the given value."""
  reportName_gte: String

  """All values containing the given string."""
  reportName_contains: String

  """All values not containing the given string."""
  reportName_not_contains: String

  """All values starting with the given string."""
  reportName_starts_with: String

  """All values not starting with the given string."""
  reportName_not_starts_with: String

  """All values ending with the given string."""
  reportName_ends_with: String

  """All values not ending with the given string."""
  reportName_not_ends_with: String
  reportCode: String

  """All values that are not equal to given value."""
  reportCode_not: String

  """All values that are contained in given list."""
  reportCode_in: [String!]

  """All values that are not contained in given list."""
  reportCode_not_in: [String!]

  """All values less than the given value."""
  reportCode_lt: String

  """All values less than or equal the given value."""
  reportCode_lte: String

  """All values greater than the given value."""
  reportCode_gt: String

  """All values greater than or equal the given value."""
  reportCode_gte: String

  """All values containing the given string."""
  reportCode_contains: String

  """All values not containing the given string."""
  reportCode_not_contains: String

  """All values starting with the given string."""
  reportCode_starts_with: String

  """All values not starting with the given string."""
  reportCode_not_starts_with: String

  """All values ending with the given string."""
  reportCode_ends_with: String

  """All values not ending with the given string."""
  reportCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ReportSubscriptionPayload {
  mutation: MutationType!
  node: Report
  updatedFields: [String!]
  previousValues: ReportPreviousValues
}

input ReportSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReportSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReportSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReportSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReportWhereInput
}

input ReportUpdateInput {
  reportName: String
  reportCode: String
  centerAdmin: CenterAdminUpdateOneRequiredWithoutReportInput
}

input ReportUpdateManyDataInput {
  reportName: String
  reportCode: String
}

input ReportUpdateManyMutationInput {
  reportName: String
  reportCode: String
}

input ReportUpdateManyWithoutCenterAdminInput {
  create: [ReportCreateWithoutCenterAdminInput!]
  connect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  delete: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutCenterAdminInput!]
  updateMany: [ReportUpdateManyWithWhereNestedInput!]
  deleteMany: [ReportScalarWhereInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutCenterAdminInput!]
}

input ReportUpdateManyWithWhereNestedInput {
  where: ReportScalarWhereInput!
  data: ReportUpdateManyDataInput!
}

input ReportUpdateWithoutCenterAdminDataInput {
  reportName: String
  reportCode: String
}

input ReportUpdateWithWhereUniqueWithoutCenterAdminInput {
  where: ReportWhereUniqueInput!
  data: ReportUpdateWithoutCenterAdminDataInput!
}

input ReportUpsertWithWhereUniqueWithoutCenterAdminInput {
  where: ReportWhereUniqueInput!
  update: ReportUpdateWithoutCenterAdminDataInput!
  create: ReportCreateWithoutCenterAdminInput!
}

input ReportWhereInput {
  """Logical AND on all given filters."""
  AND: [ReportWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReportWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReportWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reportName: String

  """All values that are not equal to given value."""
  reportName_not: String

  """All values that are contained in given list."""
  reportName_in: [String!]

  """All values that are not contained in given list."""
  reportName_not_in: [String!]

  """All values less than the given value."""
  reportName_lt: String

  """All values less than or equal the given value."""
  reportName_lte: String

  """All values greater than the given value."""
  reportName_gt: String

  """All values greater than or equal the given value."""
  reportName_gte: String

  """All values containing the given string."""
  reportName_contains: String

  """All values not containing the given string."""
  reportName_not_contains: String

  """All values starting with the given string."""
  reportName_starts_with: String

  """All values not starting with the given string."""
  reportName_not_starts_with: String

  """All values ending with the given string."""
  reportName_ends_with: String

  """All values not ending with the given string."""
  reportName_not_ends_with: String
  reportCode: String

  """All values that are not equal to given value."""
  reportCode_not: String

  """All values that are contained in given list."""
  reportCode_in: [String!]

  """All values that are not contained in given list."""
  reportCode_not_in: [String!]

  """All values less than the given value."""
  reportCode_lt: String

  """All values less than or equal the given value."""
  reportCode_lte: String

  """All values greater than the given value."""
  reportCode_gt: String

  """All values greater than or equal the given value."""
  reportCode_gte: String

  """All values containing the given string."""
  reportCode_contains: String

  """All values not containing the given string."""
  reportCode_not_contains: String

  """All values starting with the given string."""
  reportCode_starts_with: String

  """All values not starting with the given string."""
  reportCode_not_starts_with: String

  """All values ending with the given string."""
  reportCode_ends_with: String

  """All values not ending with the given string."""
  reportCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  centerAdmin: CenterAdminWhereInput
}

input ReportWhereUniqueInput {
  id: ID
}

type Score implements Node {
  id: ID!
  subjectAve: Float
  subjectTotal: Float
  registration: Registration!
  createdAt: DateTime!
  updatedAt: DateTime!
  presence: Presence!
  annExamSeriesSubj: AnnualExamSubjectSeries!
}

"""A connection to a list of items."""
type ScoreConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoreEdge]!
  aggregate: AggregateScore!
}

input ScoreCreateInput {
  id: ID
  subjectAve: Float
  subjectTotal: Float
  registration: RegistrationCreateOneInput!
  presence: PresenceCreateOneWithoutScoreInput!
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateOneWithoutScoreInput!
}

input ScoreCreateManyWithoutAnnExamSeriesSubjInput {
  create: [ScoreCreateWithoutAnnExamSeriesSubjInput!]
  connect: [ScoreWhereUniqueInput!]
}

input ScoreCreateManyWithoutPresenceInput {
  create: [ScoreCreateWithoutPresenceInput!]
  connect: [ScoreWhereUniqueInput!]
}

input ScoreCreateWithoutAnnExamSeriesSubjInput {
  id: ID
  subjectAve: Float
  subjectTotal: Float
  registration: RegistrationCreateOneInput!
  presence: PresenceCreateOneWithoutScoreInput!
}

input ScoreCreateWithoutPresenceInput {
  id: ID
  subjectAve: Float
  subjectTotal: Float
  registration: RegistrationCreateOneInput!
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateOneWithoutScoreInput!
}

"""An edge in a connection."""
type ScoreEdge {
  """The item at the end of the edge."""
  node: Score!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScoreOrderByInput {
  id_ASC
  id_DESC
  subjectAve_ASC
  subjectAve_DESC
  subjectTotal_ASC
  subjectTotal_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ScorePreviousValues {
  id: ID!
  subjectAve: Float
  subjectTotal: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ScoreScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoreScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoreScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoreScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subjectAve: Float

  """All values that are not equal to given value."""
  subjectAve_not: Float

  """All values that are contained in given list."""
  subjectAve_in: [Float!]

  """All values that are not contained in given list."""
  subjectAve_not_in: [Float!]

  """All values less than the given value."""
  subjectAve_lt: Float

  """All values less than or equal the given value."""
  subjectAve_lte: Float

  """All values greater than the given value."""
  subjectAve_gt: Float

  """All values greater than or equal the given value."""
  subjectAve_gte: Float
  subjectTotal: Float

  """All values that are not equal to given value."""
  subjectTotal_not: Float

  """All values that are contained in given list."""
  subjectTotal_in: [Float!]

  """All values that are not contained in given list."""
  subjectTotal_not_in: [Float!]

  """All values less than the given value."""
  subjectTotal_lt: Float

  """All values less than or equal the given value."""
  subjectTotal_lte: Float

  """All values greater than the given value."""
  subjectTotal_gt: Float

  """All values greater than or equal the given value."""
  subjectTotal_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ScoreSubscriptionPayload {
  mutation: MutationType!
  node: Score
  updatedFields: [String!]
  previousValues: ScorePreviousValues
}

input ScoreSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoreSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoreSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoreSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScoreWhereInput
}

input ScoreUpdateInput {
  subjectAve: Float
  subjectTotal: Float
  registration: RegistrationUpdateOneRequiredInput
  presence: PresenceUpdateOneRequiredWithoutScoreInput
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateOneRequiredWithoutScoreInput
}

input ScoreUpdateManyDataInput {
  subjectAve: Float
  subjectTotal: Float
}

input ScoreUpdateManyMutationInput {
  subjectAve: Float
  subjectTotal: Float
}

input ScoreUpdateManyWithoutAnnExamSeriesSubjInput {
  create: [ScoreCreateWithoutAnnExamSeriesSubjInput!]
  connect: [ScoreWhereUniqueInput!]
  set: [ScoreWhereUniqueInput!]
  disconnect: [ScoreWhereUniqueInput!]
  delete: [ScoreWhereUniqueInput!]
  update: [ScoreUpdateWithWhereUniqueWithoutAnnExamSeriesSubjInput!]
  updateMany: [ScoreUpdateManyWithWhereNestedInput!]
  deleteMany: [ScoreScalarWhereInput!]
  upsert: [ScoreUpsertWithWhereUniqueWithoutAnnExamSeriesSubjInput!]
}

input ScoreUpdateManyWithoutPresenceInput {
  create: [ScoreCreateWithoutPresenceInput!]
  connect: [ScoreWhereUniqueInput!]
  set: [ScoreWhereUniqueInput!]
  disconnect: [ScoreWhereUniqueInput!]
  delete: [ScoreWhereUniqueInput!]
  update: [ScoreUpdateWithWhereUniqueWithoutPresenceInput!]
  updateMany: [ScoreUpdateManyWithWhereNestedInput!]
  deleteMany: [ScoreScalarWhereInput!]
  upsert: [ScoreUpsertWithWhereUniqueWithoutPresenceInput!]
}

input ScoreUpdateManyWithWhereNestedInput {
  where: ScoreScalarWhereInput!
  data: ScoreUpdateManyDataInput!
}

input ScoreUpdateWithoutAnnExamSeriesSubjDataInput {
  subjectAve: Float
  subjectTotal: Float
  registration: RegistrationUpdateOneRequiredInput
  presence: PresenceUpdateOneRequiredWithoutScoreInput
}

input ScoreUpdateWithoutPresenceDataInput {
  subjectAve: Float
  subjectTotal: Float
  registration: RegistrationUpdateOneRequiredInput
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateOneRequiredWithoutScoreInput
}

input ScoreUpdateWithWhereUniqueWithoutAnnExamSeriesSubjInput {
  where: ScoreWhereUniqueInput!
  data: ScoreUpdateWithoutAnnExamSeriesSubjDataInput!
}

input ScoreUpdateWithWhereUniqueWithoutPresenceInput {
  where: ScoreWhereUniqueInput!
  data: ScoreUpdateWithoutPresenceDataInput!
}

input ScoreUpsertWithWhereUniqueWithoutAnnExamSeriesSubjInput {
  where: ScoreWhereUniqueInput!
  update: ScoreUpdateWithoutAnnExamSeriesSubjDataInput!
  create: ScoreCreateWithoutAnnExamSeriesSubjInput!
}

input ScoreUpsertWithWhereUniqueWithoutPresenceInput {
  where: ScoreWhereUniqueInput!
  update: ScoreUpdateWithoutPresenceDataInput!
  create: ScoreCreateWithoutPresenceInput!
}

input ScoreWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoreWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoreWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoreWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subjectAve: Float

  """All values that are not equal to given value."""
  subjectAve_not: Float

  """All values that are contained in given list."""
  subjectAve_in: [Float!]

  """All values that are not contained in given list."""
  subjectAve_not_in: [Float!]

  """All values less than the given value."""
  subjectAve_lt: Float

  """All values less than or equal the given value."""
  subjectAve_lte: Float

  """All values greater than the given value."""
  subjectAve_gt: Float

  """All values greater than or equal the given value."""
  subjectAve_gte: Float
  subjectTotal: Float

  """All values that are not equal to given value."""
  subjectTotal_not: Float

  """All values that are contained in given list."""
  subjectTotal_in: [Float!]

  """All values that are not contained in given list."""
  subjectTotal_not_in: [Float!]

  """All values less than the given value."""
  subjectTotal_lt: Float

  """All values less than or equal the given value."""
  subjectTotal_lte: Float

  """All values greater than the given value."""
  subjectTotal_gt: Float

  """All values greater than or equal the given value."""
  subjectTotal_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  registration: RegistrationWhereInput
  presence: PresenceWhereInput
  annExamSeriesSubj: AnnualExamSubjectSeriesWhereInput
}

input ScoreWhereUniqueInput {
  id: ID
}

type Series implements Node {
  id: ID!
  seriesName: String!
  seriesCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  educationType: EducationType!
  registration(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration!]
}

"""A connection to a list of items."""
type SeriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SeriesEdge]!
  aggregate: AggregateSeries!
}

input SeriesCreateInput {
  id: ID
  seriesName: String!
  seriesCode: String!
  educationType: EducationTypeCreateOneWithoutSeriesInput!
  registration: RegistrationCreateManyWithoutSeriesInput
}

input SeriesCreateManyWithoutEducationTypeInput {
  create: [SeriesCreateWithoutEducationTypeInput!]
  connect: [SeriesWhereUniqueInput!]
}

input SeriesCreateOneWithoutRegistrationInput {
  create: SeriesCreateWithoutRegistrationInput
  connect: SeriesWhereUniqueInput
}

input SeriesCreateWithoutEducationTypeInput {
  id: ID
  seriesName: String!
  seriesCode: String!
  registration: RegistrationCreateManyWithoutSeriesInput
}

input SeriesCreateWithoutRegistrationInput {
  id: ID
  seriesName: String!
  seriesCode: String!
  educationType: EducationTypeCreateOneWithoutSeriesInput!
}

"""An edge in a connection."""
type SeriesEdge {
  """The item at the end of the edge."""
  node: Series!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SeriesOrderByInput {
  id_ASC
  id_DESC
  seriesName_ASC
  seriesName_DESC
  seriesCode_ASC
  seriesCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SeriesPreviousValues {
  id: ID!
  seriesName: String!
  seriesCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SeriesScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SeriesScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeriesScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeriesScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  seriesName: String

  """All values that are not equal to given value."""
  seriesName_not: String

  """All values that are contained in given list."""
  seriesName_in: [String!]

  """All values that are not contained in given list."""
  seriesName_not_in: [String!]

  """All values less than the given value."""
  seriesName_lt: String

  """All values less than or equal the given value."""
  seriesName_lte: String

  """All values greater than the given value."""
  seriesName_gt: String

  """All values greater than or equal the given value."""
  seriesName_gte: String

  """All values containing the given string."""
  seriesName_contains: String

  """All values not containing the given string."""
  seriesName_not_contains: String

  """All values starting with the given string."""
  seriesName_starts_with: String

  """All values not starting with the given string."""
  seriesName_not_starts_with: String

  """All values ending with the given string."""
  seriesName_ends_with: String

  """All values not ending with the given string."""
  seriesName_not_ends_with: String
  seriesCode: String

  """All values that are not equal to given value."""
  seriesCode_not: String

  """All values that are contained in given list."""
  seriesCode_in: [String!]

  """All values that are not contained in given list."""
  seriesCode_not_in: [String!]

  """All values less than the given value."""
  seriesCode_lt: String

  """All values less than or equal the given value."""
  seriesCode_lte: String

  """All values greater than the given value."""
  seriesCode_gt: String

  """All values greater than or equal the given value."""
  seriesCode_gte: String

  """All values containing the given string."""
  seriesCode_contains: String

  """All values not containing the given string."""
  seriesCode_not_contains: String

  """All values starting with the given string."""
  seriesCode_starts_with: String

  """All values not starting with the given string."""
  seriesCode_not_starts_with: String

  """All values ending with the given string."""
  seriesCode_ends_with: String

  """All values not ending with the given string."""
  seriesCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SeriesSubscriptionPayload {
  mutation: MutationType!
  node: Series
  updatedFields: [String!]
  previousValues: SeriesPreviousValues
}

input SeriesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SeriesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeriesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeriesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SeriesWhereInput
}

input SeriesUpdateInput {
  seriesName: String
  seriesCode: String
  educationType: EducationTypeUpdateOneRequiredWithoutSeriesInput
  registration: RegistrationUpdateManyWithoutSeriesInput
}

input SeriesUpdateManyDataInput {
  seriesName: String
  seriesCode: String
}

input SeriesUpdateManyMutationInput {
  seriesName: String
  seriesCode: String
}

input SeriesUpdateManyWithoutEducationTypeInput {
  create: [SeriesCreateWithoutEducationTypeInput!]
  connect: [SeriesWhereUniqueInput!]
  set: [SeriesWhereUniqueInput!]
  disconnect: [SeriesWhereUniqueInput!]
  delete: [SeriesWhereUniqueInput!]
  update: [SeriesUpdateWithWhereUniqueWithoutEducationTypeInput!]
  updateMany: [SeriesUpdateManyWithWhereNestedInput!]
  deleteMany: [SeriesScalarWhereInput!]
  upsert: [SeriesUpsertWithWhereUniqueWithoutEducationTypeInput!]
}

input SeriesUpdateManyWithWhereNestedInput {
  where: SeriesScalarWhereInput!
  data: SeriesUpdateManyDataInput!
}

input SeriesUpdateOneRequiredWithoutRegistrationInput {
  create: SeriesCreateWithoutRegistrationInput
  connect: SeriesWhereUniqueInput
  update: SeriesUpdateWithoutRegistrationDataInput
  upsert: SeriesUpsertWithoutRegistrationInput
}

input SeriesUpdateWithoutEducationTypeDataInput {
  seriesName: String
  seriesCode: String
  registration: RegistrationUpdateManyWithoutSeriesInput
}

input SeriesUpdateWithoutRegistrationDataInput {
  seriesName: String
  seriesCode: String
  educationType: EducationTypeUpdateOneRequiredWithoutSeriesInput
}

input SeriesUpdateWithWhereUniqueWithoutEducationTypeInput {
  where: SeriesWhereUniqueInput!
  data: SeriesUpdateWithoutEducationTypeDataInput!
}

input SeriesUpsertWithoutRegistrationInput {
  update: SeriesUpdateWithoutRegistrationDataInput!
  create: SeriesCreateWithoutRegistrationInput!
}

input SeriesUpsertWithWhereUniqueWithoutEducationTypeInput {
  where: SeriesWhereUniqueInput!
  update: SeriesUpdateWithoutEducationTypeDataInput!
  create: SeriesCreateWithoutEducationTypeInput!
}

input SeriesWhereInput {
  """Logical AND on all given filters."""
  AND: [SeriesWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeriesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeriesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  seriesName: String

  """All values that are not equal to given value."""
  seriesName_not: String

  """All values that are contained in given list."""
  seriesName_in: [String!]

  """All values that are not contained in given list."""
  seriesName_not_in: [String!]

  """All values less than the given value."""
  seriesName_lt: String

  """All values less than or equal the given value."""
  seriesName_lte: String

  """All values greater than the given value."""
  seriesName_gt: String

  """All values greater than or equal the given value."""
  seriesName_gte: String

  """All values containing the given string."""
  seriesName_contains: String

  """All values not containing the given string."""
  seriesName_not_contains: String

  """All values starting with the given string."""
  seriesName_starts_with: String

  """All values not starting with the given string."""
  seriesName_not_starts_with: String

  """All values ending with the given string."""
  seriesName_ends_with: String

  """All values not ending with the given string."""
  seriesName_not_ends_with: String
  seriesCode: String

  """All values that are not equal to given value."""
  seriesCode_not: String

  """All values that are contained in given list."""
  seriesCode_in: [String!]

  """All values that are not contained in given list."""
  seriesCode_not_in: [String!]

  """All values less than the given value."""
  seriesCode_lt: String

  """All values less than or equal the given value."""
  seriesCode_lte: String

  """All values greater than the given value."""
  seriesCode_gt: String

  """All values greater than or equal the given value."""
  seriesCode_gte: String

  """All values containing the given string."""
  seriesCode_contains: String

  """All values not containing the given string."""
  seriesCode_not_contains: String

  """All values starting with the given string."""
  seriesCode_starts_with: String

  """All values not starting with the given string."""
  seriesCode_not_starts_with: String

  """All values ending with the given string."""
  seriesCode_ends_with: String

  """All values not ending with the given string."""
  seriesCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  educationType: EducationTypeWhereInput
  registration_every: RegistrationWhereInput
  registration_some: RegistrationWhereInput
  registration_none: RegistrationWhereInput
}

input SeriesWhereUniqueInput {
  id: ID
  seriesCode: String
}

type Session implements Node {
  id: ID!
  sessionName: String!
  sessionCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  centerAdmin(where: CenterAdminWhereInput, orderBy: CenterAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CenterAdmin!]
  annExamSeriesSubj(where: AnnualExamSubjectSeriesWhereInput, orderBy: AnnualExamSubjectSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnnualExamSubjectSeries!]
  registration(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration!]
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  sessionName: String!
  sessionCode: String!
  centerAdmin: CenterAdminCreateManyWithoutSessionInput
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateManyWithoutSessionInput
  registration: RegistrationCreateManyWithoutSessionInput
}

input SessionCreateOneWithoutAnnExamSeriesSubjInput {
  create: SessionCreateWithoutAnnExamSeriesSubjInput
  connect: SessionWhereUniqueInput
}

input SessionCreateOneWithoutCenterAdminInput {
  create: SessionCreateWithoutCenterAdminInput
  connect: SessionWhereUniqueInput
}

input SessionCreateOneWithoutRegistrationInput {
  create: SessionCreateWithoutRegistrationInput
  connect: SessionWhereUniqueInput
}

input SessionCreateWithoutAnnExamSeriesSubjInput {
  id: ID
  sessionName: String!
  sessionCode: String!
  centerAdmin: CenterAdminCreateManyWithoutSessionInput
  registration: RegistrationCreateManyWithoutSessionInput
}

input SessionCreateWithoutCenterAdminInput {
  id: ID
  sessionName: String!
  sessionCode: String!
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateManyWithoutSessionInput
  registration: RegistrationCreateManyWithoutSessionInput
}

input SessionCreateWithoutRegistrationInput {
  id: ID
  sessionName: String!
  sessionCode: String!
  centerAdmin: CenterAdminCreateManyWithoutSessionInput
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateManyWithoutSessionInput
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  sessionName_ASC
  sessionName_DESC
  sessionCode_ASC
  sessionCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  sessionName: String!
  sessionCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  sessionName: String
  sessionCode: String
  centerAdmin: CenterAdminUpdateManyWithoutSessionInput
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateManyWithoutSessionInput
  registration: RegistrationUpdateManyWithoutSessionInput
}

input SessionUpdateManyMutationInput {
  sessionName: String
  sessionCode: String
}

input SessionUpdateOneRequiredWithoutAnnExamSeriesSubjInput {
  create: SessionCreateWithoutAnnExamSeriesSubjInput
  connect: SessionWhereUniqueInput
  update: SessionUpdateWithoutAnnExamSeriesSubjDataInput
  upsert: SessionUpsertWithoutAnnExamSeriesSubjInput
}

input SessionUpdateOneRequiredWithoutCenterAdminInput {
  create: SessionCreateWithoutCenterAdminInput
  connect: SessionWhereUniqueInput
  update: SessionUpdateWithoutCenterAdminDataInput
  upsert: SessionUpsertWithoutCenterAdminInput
}

input SessionUpdateOneRequiredWithoutRegistrationInput {
  create: SessionCreateWithoutRegistrationInput
  connect: SessionWhereUniqueInput
  update: SessionUpdateWithoutRegistrationDataInput
  upsert: SessionUpsertWithoutRegistrationInput
}

input SessionUpdateWithoutAnnExamSeriesSubjDataInput {
  sessionName: String
  sessionCode: String
  centerAdmin: CenterAdminUpdateManyWithoutSessionInput
  registration: RegistrationUpdateManyWithoutSessionInput
}

input SessionUpdateWithoutCenterAdminDataInput {
  sessionName: String
  sessionCode: String
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateManyWithoutSessionInput
  registration: RegistrationUpdateManyWithoutSessionInput
}

input SessionUpdateWithoutRegistrationDataInput {
  sessionName: String
  sessionCode: String
  centerAdmin: CenterAdminUpdateManyWithoutSessionInput
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateManyWithoutSessionInput
}

input SessionUpsertWithoutAnnExamSeriesSubjInput {
  update: SessionUpdateWithoutAnnExamSeriesSubjDataInput!
  create: SessionCreateWithoutAnnExamSeriesSubjInput!
}

input SessionUpsertWithoutCenterAdminInput {
  update: SessionUpdateWithoutCenterAdminDataInput!
  create: SessionCreateWithoutCenterAdminInput!
}

input SessionUpsertWithoutRegistrationInput {
  update: SessionUpdateWithoutRegistrationDataInput!
  create: SessionCreateWithoutRegistrationInput!
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sessionName: String

  """All values that are not equal to given value."""
  sessionName_not: String

  """All values that are contained in given list."""
  sessionName_in: [String!]

  """All values that are not contained in given list."""
  sessionName_not_in: [String!]

  """All values less than the given value."""
  sessionName_lt: String

  """All values less than or equal the given value."""
  sessionName_lte: String

  """All values greater than the given value."""
  sessionName_gt: String

  """All values greater than or equal the given value."""
  sessionName_gte: String

  """All values containing the given string."""
  sessionName_contains: String

  """All values not containing the given string."""
  sessionName_not_contains: String

  """All values starting with the given string."""
  sessionName_starts_with: String

  """All values not starting with the given string."""
  sessionName_not_starts_with: String

  """All values ending with the given string."""
  sessionName_ends_with: String

  """All values not ending with the given string."""
  sessionName_not_ends_with: String
  sessionCode: String

  """All values that are not equal to given value."""
  sessionCode_not: String

  """All values that are contained in given list."""
  sessionCode_in: [String!]

  """All values that are not contained in given list."""
  sessionCode_not_in: [String!]

  """All values less than the given value."""
  sessionCode_lt: String

  """All values less than or equal the given value."""
  sessionCode_lte: String

  """All values greater than the given value."""
  sessionCode_gt: String

  """All values greater than or equal the given value."""
  sessionCode_gte: String

  """All values containing the given string."""
  sessionCode_contains: String

  """All values not containing the given string."""
  sessionCode_not_contains: String

  """All values starting with the given string."""
  sessionCode_starts_with: String

  """All values not starting with the given string."""
  sessionCode_not_starts_with: String

  """All values ending with the given string."""
  sessionCode_ends_with: String

  """All values not ending with the given string."""
  sessionCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  centerAdmin_every: CenterAdminWhereInput
  centerAdmin_some: CenterAdminWhereInput
  centerAdmin_none: CenterAdminWhereInput
  annExamSeriesSubj_every: AnnualExamSubjectSeriesWhereInput
  annExamSeriesSubj_some: AnnualExamSubjectSeriesWhereInput
  annExamSeriesSubj_none: AnnualExamSubjectSeriesWhereInput
  registration_every: RegistrationWhereInput
  registration_some: RegistrationWhereInput
  registration_none: RegistrationWhereInput
}

input SessionWhereUniqueInput {
  id: ID
  sessionCode: String
}

type SubDivision implements Node {
  id: ID!
  subDivName: String!
  subDivCode: String!
  division: Division!
  createdAt: DateTime!
  updatedAt: DateTime!
  town(where: TownWhereInput, orderBy: TownOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Town!]
}

"""A connection to a list of items."""
type SubDivisionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubDivisionEdge]!
  aggregate: AggregateSubDivision!
}

input SubDivisionCreateInput {
  id: ID
  subDivName: String!
  subDivCode: String!
  division: DivisionCreateOneWithoutSubDivisionInput!
  town: TownCreateManyWithoutSubDivInput
}

input SubDivisionCreateManyWithoutDivisionInput {
  create: [SubDivisionCreateWithoutDivisionInput!]
  connect: [SubDivisionWhereUniqueInput!]
}

input SubDivisionCreateOneWithoutTownInput {
  create: SubDivisionCreateWithoutTownInput
  connect: SubDivisionWhereUniqueInput
}

input SubDivisionCreateWithoutDivisionInput {
  id: ID
  subDivName: String!
  subDivCode: String!
  town: TownCreateManyWithoutSubDivInput
}

input SubDivisionCreateWithoutTownInput {
  id: ID
  subDivName: String!
  subDivCode: String!
  division: DivisionCreateOneWithoutSubDivisionInput!
}

"""An edge in a connection."""
type SubDivisionEdge {
  """The item at the end of the edge."""
  node: SubDivision!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubDivisionOrderByInput {
  id_ASC
  id_DESC
  subDivName_ASC
  subDivName_DESC
  subDivCode_ASC
  subDivCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubDivisionPreviousValues {
  id: ID!
  subDivName: String!
  subDivCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SubDivisionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubDivisionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubDivisionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubDivisionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subDivName: String

  """All values that are not equal to given value."""
  subDivName_not: String

  """All values that are contained in given list."""
  subDivName_in: [String!]

  """All values that are not contained in given list."""
  subDivName_not_in: [String!]

  """All values less than the given value."""
  subDivName_lt: String

  """All values less than or equal the given value."""
  subDivName_lte: String

  """All values greater than the given value."""
  subDivName_gt: String

  """All values greater than or equal the given value."""
  subDivName_gte: String

  """All values containing the given string."""
  subDivName_contains: String

  """All values not containing the given string."""
  subDivName_not_contains: String

  """All values starting with the given string."""
  subDivName_starts_with: String

  """All values not starting with the given string."""
  subDivName_not_starts_with: String

  """All values ending with the given string."""
  subDivName_ends_with: String

  """All values not ending with the given string."""
  subDivName_not_ends_with: String
  subDivCode: String

  """All values that are not equal to given value."""
  subDivCode_not: String

  """All values that are contained in given list."""
  subDivCode_in: [String!]

  """All values that are not contained in given list."""
  subDivCode_not_in: [String!]

  """All values less than the given value."""
  subDivCode_lt: String

  """All values less than or equal the given value."""
  subDivCode_lte: String

  """All values greater than the given value."""
  subDivCode_gt: String

  """All values greater than or equal the given value."""
  subDivCode_gte: String

  """All values containing the given string."""
  subDivCode_contains: String

  """All values not containing the given string."""
  subDivCode_not_contains: String

  """All values starting with the given string."""
  subDivCode_starts_with: String

  """All values not starting with the given string."""
  subDivCode_not_starts_with: String

  """All values ending with the given string."""
  subDivCode_ends_with: String

  """All values not ending with the given string."""
  subDivCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SubDivisionSubscriptionPayload {
  mutation: MutationType!
  node: SubDivision
  updatedFields: [String!]
  previousValues: SubDivisionPreviousValues
}

input SubDivisionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubDivisionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubDivisionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubDivisionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubDivisionWhereInput
}

input SubDivisionUpdateInput {
  subDivName: String
  subDivCode: String
  division: DivisionUpdateOneRequiredWithoutSubDivisionInput
  town: TownUpdateManyWithoutSubDivInput
}

input SubDivisionUpdateManyDataInput {
  subDivName: String
  subDivCode: String
}

input SubDivisionUpdateManyMutationInput {
  subDivName: String
  subDivCode: String
}

input SubDivisionUpdateManyWithoutDivisionInput {
  create: [SubDivisionCreateWithoutDivisionInput!]
  connect: [SubDivisionWhereUniqueInput!]
  set: [SubDivisionWhereUniqueInput!]
  disconnect: [SubDivisionWhereUniqueInput!]
  delete: [SubDivisionWhereUniqueInput!]
  update: [SubDivisionUpdateWithWhereUniqueWithoutDivisionInput!]
  updateMany: [SubDivisionUpdateManyWithWhereNestedInput!]
  deleteMany: [SubDivisionScalarWhereInput!]
  upsert: [SubDivisionUpsertWithWhereUniqueWithoutDivisionInput!]
}

input SubDivisionUpdateManyWithWhereNestedInput {
  where: SubDivisionScalarWhereInput!
  data: SubDivisionUpdateManyDataInput!
}

input SubDivisionUpdateOneRequiredWithoutTownInput {
  create: SubDivisionCreateWithoutTownInput
  connect: SubDivisionWhereUniqueInput
  update: SubDivisionUpdateWithoutTownDataInput
  upsert: SubDivisionUpsertWithoutTownInput
}

input SubDivisionUpdateWithoutDivisionDataInput {
  subDivName: String
  subDivCode: String
  town: TownUpdateManyWithoutSubDivInput
}

input SubDivisionUpdateWithoutTownDataInput {
  subDivName: String
  subDivCode: String
  division: DivisionUpdateOneRequiredWithoutSubDivisionInput
}

input SubDivisionUpdateWithWhereUniqueWithoutDivisionInput {
  where: SubDivisionWhereUniqueInput!
  data: SubDivisionUpdateWithoutDivisionDataInput!
}

input SubDivisionUpsertWithoutTownInput {
  update: SubDivisionUpdateWithoutTownDataInput!
  create: SubDivisionCreateWithoutTownInput!
}

input SubDivisionUpsertWithWhereUniqueWithoutDivisionInput {
  where: SubDivisionWhereUniqueInput!
  update: SubDivisionUpdateWithoutDivisionDataInput!
  create: SubDivisionCreateWithoutDivisionInput!
}

input SubDivisionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubDivisionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubDivisionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubDivisionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subDivName: String

  """All values that are not equal to given value."""
  subDivName_not: String

  """All values that are contained in given list."""
  subDivName_in: [String!]

  """All values that are not contained in given list."""
  subDivName_not_in: [String!]

  """All values less than the given value."""
  subDivName_lt: String

  """All values less than or equal the given value."""
  subDivName_lte: String

  """All values greater than the given value."""
  subDivName_gt: String

  """All values greater than or equal the given value."""
  subDivName_gte: String

  """All values containing the given string."""
  subDivName_contains: String

  """All values not containing the given string."""
  subDivName_not_contains: String

  """All values starting with the given string."""
  subDivName_starts_with: String

  """All values not starting with the given string."""
  subDivName_not_starts_with: String

  """All values ending with the given string."""
  subDivName_ends_with: String

  """All values not ending with the given string."""
  subDivName_not_ends_with: String
  subDivCode: String

  """All values that are not equal to given value."""
  subDivCode_not: String

  """All values that are contained in given list."""
  subDivCode_in: [String!]

  """All values that are not contained in given list."""
  subDivCode_not_in: [String!]

  """All values less than the given value."""
  subDivCode_lt: String

  """All values less than or equal the given value."""
  subDivCode_lte: String

  """All values greater than the given value."""
  subDivCode_gt: String

  """All values greater than or equal the given value."""
  subDivCode_gte: String

  """All values containing the given string."""
  subDivCode_contains: String

  """All values not containing the given string."""
  subDivCode_not_contains: String

  """All values starting with the given string."""
  subDivCode_starts_with: String

  """All values not starting with the given string."""
  subDivCode_not_starts_with: String

  """All values ending with the given string."""
  subDivCode_ends_with: String

  """All values not ending with the given string."""
  subDivCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  division: DivisionWhereInput
  town_every: TownWhereInput
  town_some: TownWhereInput
  town_none: TownWhereInput
}

input SubDivisionWhereUniqueInput {
  id: ID
  subDivCode: String
}

type Subject implements Node {
  id: ID!
  subjectName: String!
  subjectCode: String!
  annExamSeriesSubj(where: AnnualExamSubjectSeriesWhereInput, orderBy: AnnualExamSubjectSeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnnualExamSubjectSeries!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  subjectName: String!
  subjectCode: String!
  annExamSeriesSubj: AnnualExamSubjectSeriesCreateManyInput
}

"""An edge in a connection."""
type SubjectEdge {
  """The item at the end of the edge."""
  node: Subject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  subjectName_ASC
  subjectName_DESC
  subjectCode_ASC
  subjectCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubjectPreviousValues {
  id: ID!
  subjectName: String!
  subjectCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
}

input SubjectUpdateInput {
  subjectName: String
  subjectCode: String
  annExamSeriesSubj: AnnualExamSubjectSeriesUpdateManyInput
}

input SubjectUpdateManyMutationInput {
  subjectName: String
  subjectCode: String
}

input SubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subjectName: String

  """All values that are not equal to given value."""
  subjectName_not: String

  """All values that are contained in given list."""
  subjectName_in: [String!]

  """All values that are not contained in given list."""
  subjectName_not_in: [String!]

  """All values less than the given value."""
  subjectName_lt: String

  """All values less than or equal the given value."""
  subjectName_lte: String

  """All values greater than the given value."""
  subjectName_gt: String

  """All values greater than or equal the given value."""
  subjectName_gte: String

  """All values containing the given string."""
  subjectName_contains: String

  """All values not containing the given string."""
  subjectName_not_contains: String

  """All values starting with the given string."""
  subjectName_starts_with: String

  """All values not starting with the given string."""
  subjectName_not_starts_with: String

  """All values ending with the given string."""
  subjectName_ends_with: String

  """All values not ending with the given string."""
  subjectName_not_ends_with: String
  subjectCode: String

  """All values that are not equal to given value."""
  subjectCode_not: String

  """All values that are contained in given list."""
  subjectCode_in: [String!]

  """All values that are not contained in given list."""
  subjectCode_not_in: [String!]

  """All values less than the given value."""
  subjectCode_lt: String

  """All values less than or equal the given value."""
  subjectCode_lte: String

  """All values greater than the given value."""
  subjectCode_gt: String

  """All values greater than or equal the given value."""
  subjectCode_gte: String

  """All values containing the given string."""
  subjectCode_contains: String

  """All values not containing the given string."""
  subjectCode_not_contains: String

  """All values starting with the given string."""
  subjectCode_starts_with: String

  """All values not starting with the given string."""
  subjectCode_not_starts_with: String

  """All values ending with the given string."""
  subjectCode_ends_with: String

  """All values not ending with the given string."""
  subjectCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  annExamSeriesSubj_every: AnnualExamSubjectSeriesWhereInput
  annExamSeriesSubj_some: AnnualExamSubjectSeriesWhereInput
  annExamSeriesSubj_none: AnnualExamSubjectSeriesWhereInput
}

input SubjectWhereUniqueInput {
  id: ID
  subjectName: String
  subjectCode: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  region(where: RegionSubscriptionWhereInput): RegionSubscriptionPayload
  division(where: DivisionSubscriptionWhereInput): DivisionSubscriptionPayload
  subDivision(where: SubDivisionSubscriptionWhereInput): SubDivisionSubscriptionPayload
  town(where: TownSubscriptionWhereInput): TownSubscriptionPayload
  series(where: SeriesSubscriptionWhereInput): SeriesSubscriptionPayload
  educationType(where: EducationTypeSubscriptionWhereInput): EducationTypeSubscriptionPayload
  exam(where: ExamSubscriptionWhereInput): ExamSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  presence(where: PresenceSubscriptionWhereInput): PresenceSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  gender(where: GenderSubscriptionWhereInput): GenderSubscriptionPayload
  candidate(where: CandidateSubscriptionWhereInput): CandidateSubscriptionPayload
  rank(where: RankSubscriptionWhereInput): RankSubscriptionPayload
  centerAdmin(where: CenterAdminSubscriptionWhereInput): CenterAdminSubscriptionPayload
  report(where: ReportSubscriptionWhereInput): ReportSubscriptionPayload
  score(where: ScoreSubscriptionWhereInput): ScoreSubscriptionPayload
  anotherType(where: AnotherTypeSubscriptionWhereInput): AnotherTypeSubscriptionPayload
  center(where: CenterSubscriptionWhereInput): CenterSubscriptionPayload
  annualExamSubjectSeries(where: AnnualExamSubjectSeriesSubscriptionWhereInput): AnnualExamSubjectSeriesSubscriptionPayload
  registration(where: RegistrationSubscriptionWhereInput): RegistrationSubscriptionPayload
}

type Town implements Node {
  id: ID!
  townName: String!
  townCode: String!
  subDiv: SubDivision!
  createdAt: DateTime!
  updatedAt: DateTime!
  center(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Center!]
}

"""A connection to a list of items."""
type TownConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TownEdge]!
  aggregate: AggregateTown!
}

input TownCreateInput {
  id: ID
  townName: String!
  townCode: String!
  subDiv: SubDivisionCreateOneWithoutTownInput!
  center: CenterCreateManyWithoutTownInput
}

input TownCreateManyWithoutSubDivInput {
  create: [TownCreateWithoutSubDivInput!]
  connect: [TownWhereUniqueInput!]
}

input TownCreateOneWithoutCenterInput {
  create: TownCreateWithoutCenterInput
  connect: TownWhereUniqueInput
}

input TownCreateWithoutCenterInput {
  id: ID
  townName: String!
  townCode: String!
  subDiv: SubDivisionCreateOneWithoutTownInput!
}

input TownCreateWithoutSubDivInput {
  id: ID
  townName: String!
  townCode: String!
  center: CenterCreateManyWithoutTownInput
}

"""An edge in a connection."""
type TownEdge {
  """The item at the end of the edge."""
  node: Town!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TownOrderByInput {
  id_ASC
  id_DESC
  townName_ASC
  townName_DESC
  townCode_ASC
  townCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TownPreviousValues {
  id: ID!
  townName: String!
  townCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TownScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TownScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TownScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TownScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  townName: String

  """All values that are not equal to given value."""
  townName_not: String

  """All values that are contained in given list."""
  townName_in: [String!]

  """All values that are not contained in given list."""
  townName_not_in: [String!]

  """All values less than the given value."""
  townName_lt: String

  """All values less than or equal the given value."""
  townName_lte: String

  """All values greater than the given value."""
  townName_gt: String

  """All values greater than or equal the given value."""
  townName_gte: String

  """All values containing the given string."""
  townName_contains: String

  """All values not containing the given string."""
  townName_not_contains: String

  """All values starting with the given string."""
  townName_starts_with: String

  """All values not starting with the given string."""
  townName_not_starts_with: String

  """All values ending with the given string."""
  townName_ends_with: String

  """All values not ending with the given string."""
  townName_not_ends_with: String
  townCode: String

  """All values that are not equal to given value."""
  townCode_not: String

  """All values that are contained in given list."""
  townCode_in: [String!]

  """All values that are not contained in given list."""
  townCode_not_in: [String!]

  """All values less than the given value."""
  townCode_lt: String

  """All values less than or equal the given value."""
  townCode_lte: String

  """All values greater than the given value."""
  townCode_gt: String

  """All values greater than or equal the given value."""
  townCode_gte: String

  """All values containing the given string."""
  townCode_contains: String

  """All values not containing the given string."""
  townCode_not_contains: String

  """All values starting with the given string."""
  townCode_starts_with: String

  """All values not starting with the given string."""
  townCode_not_starts_with: String

  """All values ending with the given string."""
  townCode_ends_with: String

  """All values not ending with the given string."""
  townCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type TownSubscriptionPayload {
  mutation: MutationType!
  node: Town
  updatedFields: [String!]
  previousValues: TownPreviousValues
}

input TownSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TownSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TownSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TownSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TownWhereInput
}

input TownUpdateInput {
  townName: String
  townCode: String
  subDiv: SubDivisionUpdateOneRequiredWithoutTownInput
  center: CenterUpdateManyWithoutTownInput
}

input TownUpdateManyDataInput {
  townName: String
  townCode: String
}

input TownUpdateManyMutationInput {
  townName: String
  townCode: String
}

input TownUpdateManyWithoutSubDivInput {
  create: [TownCreateWithoutSubDivInput!]
  connect: [TownWhereUniqueInput!]
  set: [TownWhereUniqueInput!]
  disconnect: [TownWhereUniqueInput!]
  delete: [TownWhereUniqueInput!]
  update: [TownUpdateWithWhereUniqueWithoutSubDivInput!]
  updateMany: [TownUpdateManyWithWhereNestedInput!]
  deleteMany: [TownScalarWhereInput!]
  upsert: [TownUpsertWithWhereUniqueWithoutSubDivInput!]
}

input TownUpdateManyWithWhereNestedInput {
  where: TownScalarWhereInput!
  data: TownUpdateManyDataInput!
}

input TownUpdateOneRequiredWithoutCenterInput {
  create: TownCreateWithoutCenterInput
  connect: TownWhereUniqueInput
  update: TownUpdateWithoutCenterDataInput
  upsert: TownUpsertWithoutCenterInput
}

input TownUpdateWithoutCenterDataInput {
  townName: String
  townCode: String
  subDiv: SubDivisionUpdateOneRequiredWithoutTownInput
}

input TownUpdateWithoutSubDivDataInput {
  townName: String
  townCode: String
  center: CenterUpdateManyWithoutTownInput
}

input TownUpdateWithWhereUniqueWithoutSubDivInput {
  where: TownWhereUniqueInput!
  data: TownUpdateWithoutSubDivDataInput!
}

input TownUpsertWithoutCenterInput {
  update: TownUpdateWithoutCenterDataInput!
  create: TownCreateWithoutCenterInput!
}

input TownUpsertWithWhereUniqueWithoutSubDivInput {
  where: TownWhereUniqueInput!
  update: TownUpdateWithoutSubDivDataInput!
  create: TownCreateWithoutSubDivInput!
}

input TownWhereInput {
  """Logical AND on all given filters."""
  AND: [TownWhereInput!]

  """Logical OR on all given filters."""
  OR: [TownWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TownWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  townName: String

  """All values that are not equal to given value."""
  townName_not: String

  """All values that are contained in given list."""
  townName_in: [String!]

  """All values that are not contained in given list."""
  townName_not_in: [String!]

  """All values less than the given value."""
  townName_lt: String

  """All values less than or equal the given value."""
  townName_lte: String

  """All values greater than the given value."""
  townName_gt: String

  """All values greater than or equal the given value."""
  townName_gte: String

  """All values containing the given string."""
  townName_contains: String

  """All values not containing the given string."""
  townName_not_contains: String

  """All values starting with the given string."""
  townName_starts_with: String

  """All values not starting with the given string."""
  townName_not_starts_with: String

  """All values ending with the given string."""
  townName_ends_with: String

  """All values not ending with the given string."""
  townName_not_ends_with: String
  townCode: String

  """All values that are not equal to given value."""
  townCode_not: String

  """All values that are contained in given list."""
  townCode_in: [String!]

  """All values that are not contained in given list."""
  townCode_not_in: [String!]

  """All values less than the given value."""
  townCode_lt: String

  """All values less than or equal the given value."""
  townCode_lte: String

  """All values greater than the given value."""
  townCode_gt: String

  """All values greater than or equal the given value."""
  townCode_gte: String

  """All values containing the given string."""
  townCode_contains: String

  """All values not containing the given string."""
  townCode_not_contains: String

  """All values starting with the given string."""
  townCode_starts_with: String

  """All values not starting with the given string."""
  townCode_not_starts_with: String

  """All values ending with the given string."""
  townCode_ends_with: String

  """All values not ending with the given string."""
  townCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  subDiv: SubDivisionWhereInput
  center_every: CenterWhereInput
  center_some: CenterWhereInput
  center_none: CenterWhereInput
}

input TownWhereUniqueInput {
  id: ID
  townCode: String
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  item(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  item: ItemCreateManyWithoutUserInput
}

input UserCreateOneWithoutItemInput {
  create: UserCreateWithoutItemInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutItemInput {
  id: ID
  name: String!
  email: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  item: ItemUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateOneRequiredWithoutItemInput {
  create: UserCreateWithoutItemInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutItemDataInput
  upsert: UserUpsertWithoutItemInput
}

input UserUpdateWithoutItemDataInput {
  name: String
  email: String
}

input UserUpsertWithoutItemInput {
  update: UserUpdateWithoutItemDataInput!
  create: UserCreateWithoutItemInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  item_every: ItemWhereInput
  item_some: ItemWhereInput
  item_none: ItemWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
